From e5dcfac739bc417e28f7ef887f0144a9e3a6152e Mon Sep 17 00:00:00 2001
From: anlang <anlang@example.com>
Date: Fri, 26 Jan 2018 17:24:27 +0800
Subject: [PATCH 04/12] 1.fix vCGNAPT bug;2.fix cavium nic set mtu fail

---
 Makefile                                           |   8 +-
 VNFs/vACL/pipeline/pipeline_acl_be.h               |   3 +-
 VNFs/vCGNAPT/Makefile                              |   2 +-
 VNFs/vCGNAPT/pipeline/pipeline_cgnapt_be.c         | 415 +++++++++++----------
 VNFs/vCGNAPT/pipeline/pipeline_cgnapt_be.h         |  44 +--
 common/VIL/l2l3_stack/l3fwd_lpm4.c                 |  12 +-
 common/VIL/l2l3_stack/l3fwd_lpm4.h                 |   3 +-
 common/VIL/l2l3_stack/l3fwd_lpm6.c                 |  12 +-
 common/VIL/l2l3_stack/l3fwd_lpm6.h                 |   4 +-
 common/VIL/l2l3_stack/lib_arp.c                    |   8 +-
 common/VIL/pipeline_arpicmp/pipeline_arpicmp_be.c  |  47 +--
 common/VIL/pipeline_loadb/pipeline_loadb_be.c      |  24 +-
 common/VIL/pipeline_loadb/pipeline_loadb_be.h      |   3 +-
 common/VIL/pipeline_txrx/pipeline_txrx_be.c        |  26 +-
 common/vnf_common/mbuf_hdr_room.h                  |   6 +
 common/vnf_common/vnf_common.h                     |   3 +-
 .../cavium-liquidio-setmtu-fail.patch              |  13 +
 .../dpdk_custom_patch/nfp-driver-set-inport.patch  |  23 --
 tools/vnf_build.sh                                 |   1 +
 19 files changed, 330 insertions(+), 327 deletions(-)
 create mode 100644 common/vnf_common/mbuf_hdr_room.h
 create mode 100644 patches/dpdk_custom_patch/cavium-liquidio-setmtu-fail.patch

diff --git a/Makefile b/Makefile
index bfe85c5..794532e 100644
--- a/Makefile
+++ b/Makefile
@@ -21,11 +21,11 @@ RTE_TARGET ?= x86_64-native-linuxapp-gcc
 
 TARGETS      := all clean
 VNF_DIR      := VNFs
-ACL          := $(VNF_DIR)/vACL
-FW           := $(VNF_DIR)/vFW
+#ACL          := $(VNF_DIR)/vACL
+#FW           := $(VNF_DIR)/vFW
 CGNAPT       := $(VNF_DIR)/vCGNAPT
-UDP_Replay   := $(VNF_DIR)/UDP_Replay
-PROX         := $(VNF_DIR)/DPPD-PROX
+#UDP_Replay   := $(VNF_DIR)/UDP_Replay
+#PROX         := $(VNF_DIR)/DPPD-PROX
 
 subdirs      := $(ACL) $(CGNAPT) $(FW) $(UDP_Replay) ${PROX}
 
diff --git a/VNFs/vACL/pipeline/pipeline_acl_be.h b/VNFs/vACL/pipeline/pipeline_acl_be.h
index edce7e4..da07a43 100644
--- a/VNFs/vACL/pipeline/pipeline_acl_be.h
+++ b/VNFs/vACL/pipeline/pipeline_acl_be.h
@@ -29,13 +29,14 @@
 #include "pipeline_common_be.h"
 #include "rte_ct_tcp.h"
 #include "pipeline_arpicmp_be.h"
+#include "mbuf_hdr_room.h"
 
 enum pipeline_acl_key_type {
 	PIPELINE_ACL_IPV4_5TUPLE,
 	PIPELINE_ACL_IPV6_5TUPLE
 };
 
-#define MBUF_HDR_ROOM 256
+#define FUN_MBUF_HDR_ROOM(pkt) DPDK_17_05_MBUF_HDR_ROOM(pkt)
 #define ETH_HDR_SIZE  14
 #define IP_HDR_SIZE  20
 #define IP_HDR_DSCP_OFST 1
diff --git a/VNFs/vCGNAPT/Makefile b/VNFs/vCGNAPT/Makefile
index 41cacfb..a3df57b 100644
--- a/VNFs/vCGNAPT/Makefile
+++ b/VNFs/vCGNAPT/Makefile
@@ -119,7 +119,7 @@ SRCS-$(CONFIG_RTE_LIBRTE_PIPELINE) += lib_ftp_alg.c
 SRCS-$(CONFIG_RTE_LIBRTE_PIPELINE) += gateway.c
 
 CFLAGS += -O3
-CFLAGS += -DIPV6
+#CFLAGS += -DIPV6
 CFLAGS += -DCHECKSUM_REQ
 #CFLAGS += -DPCP_ENABLE
 #CFLAGS += -DSIP_ALG
diff --git a/VNFs/vCGNAPT/pipeline/pipeline_cgnapt_be.c b/VNFs/vCGNAPT/pipeline/pipeline_cgnapt_be.c
index a1779aa..8a99b5f 100644
--- a/VNFs/vCGNAPT/pipeline/pipeline_cgnapt_be.c
+++ b/VNFs/vCGNAPT/pipeline/pipeline_cgnapt_be.c
@@ -53,12 +53,12 @@
 #include <rte_prefetch.h>
 #include <rte_hexdump.h>
 
+#include "vnf_common.h"
 #include "pipeline_cgnapt_be.h"
 #include "pipeline_cgnapt_common.h"
 #include "pipeline_actions_common.h"
 #include "hash_func.h"
 #include "pipeline_arpicmp_be.h"
-#include "vnf_common.h"
 #include "app.h"
 #include "pipeline_common_be.h"
 #include "vnf_common.h"
@@ -487,7 +487,7 @@ void hw_checksum(struct rte_mbuf *pkt, enum PKT_TYPE ver)
 	case PKT_TYPE_IPV6:
 
 		ip_header = RTE_MBUF_METADATA_UINT32_PTR(pkt,
-				MBUF_HDR_ROOM + ETH_HDR_SIZE + temp);
+				FUN_MBUF_HDR_ROOM(pkt) + ETH_HDR_SIZE + temp);
 
 		pkt_type_is_ipv4 = 0;
 		pkt->ol_flags |= PKT_TX_IPV6;
@@ -503,14 +503,14 @@ void hw_checksum(struct rte_mbuf *pkt, enum PKT_TYPE ver)
 			((unsigned char *)ip_header +
 			 sizeof(struct ipv6_hdr));
 
-		prot_offset = PROT_OFST_IP6 + temp;
+		prot_offset = FUN_PROT_OFST_IP6(pkt) + temp;
 		break;
 	case PKT_TYPE_IPV6to4:
 		temp = 20;
 	case PKT_TYPE_IPV4:
 
 		ip_header = RTE_MBUF_METADATA_UINT32_PTR(pkt,
-				MBUF_HDR_ROOM + ETH_HDR_SIZE + temp);
+				FUN_MBUF_HDR_ROOM(pkt) + ETH_HDR_SIZE + temp);
 
 		pkt->ol_flags |= PKT_TX_IPV4;
 		pkt->l3_len =
@@ -528,7 +528,7 @@ void hw_checksum(struct rte_mbuf *pkt, enum PKT_TYPE ver)
 			(struct ipv4_hdr *)ip_header;
 		ip_hdr->hdr_checksum = 0;
 
-		prot_offset = PROT_OFST_IP4 + temp;
+		prot_offset = FUN_PROT_OFST_IP4(pkt) + temp;
 		break;
 	default:
 		    printf("hw_checksum: pkt version is invalid\n");
@@ -604,7 +604,7 @@ void sw_checksum(struct rte_mbuf *pkt, enum PKT_TYPE ver)
 	case PKT_TYPE_IPV6:
 
 		ip_header = RTE_MBUF_METADATA_UINT32_PTR(pkt,
-				MBUF_HDR_ROOM + ETH_HDR_SIZE + temp);
+				FUN_MBUF_HDR_ROOM(pkt) + ETH_HDR_SIZE + temp);
 
 		pkt_type_is_ipv4 = 0;
 		tcp = (struct tcp_hdr *)
@@ -617,14 +617,14 @@ void sw_checksum(struct rte_mbuf *pkt, enum PKT_TYPE ver)
 			((unsigned char *)ip_header +
 			 sizeof(struct ipv6_hdr));
 
-		prot_offset = PROT_OFST_IP6 + temp;
+		prot_offset = FUN_PROT_OFST_IP6(pkt) + temp;
 		break;
 	case PKT_TYPE_IPV6to4:
 		temp = 20;
 	case PKT_TYPE_IPV4:
 
 		ip_header = RTE_MBUF_METADATA_UINT32_PTR(pkt,
-				MBUF_HDR_ROOM + ETH_HDR_SIZE + temp);
+				FUN_MBUF_HDR_ROOM(pkt) + ETH_HDR_SIZE + temp);
 
 		tcp = (struct tcp_hdr *)
 			((unsigned char *)ip_header +
@@ -636,7 +636,7 @@ void sw_checksum(struct rte_mbuf *pkt, enum PKT_TYPE ver)
 			((unsigned char *)ip_header +
 			 sizeof(struct ipv4_hdr));
 
-		prot_offset = PROT_OFST_IP4 + temp;
+		prot_offset = FUN_PROT_OFST_IP4(pkt) + temp;
 		break;
 	default:
 		     printf("sw_checksum: pkt version is invalid\n");
@@ -731,7 +731,7 @@ static uint8_t check_arp_icmp(
 	uint64_t pkt_mask,
 	struct pipeline_cgnapt *p_nat)
 {
-	uint32_t eth_proto_offset = MBUF_HDR_ROOM + 12;
+	uint32_t eth_proto_offset = FUN_MBUF_HDR_ROOM(pkt) + 12;
 	uint16_t *eth_proto = RTE_MBUF_METADATA_UINT16_PTR(
 				pkt, eth_proto_offset);
 	struct app_link_params *link;
@@ -769,12 +769,12 @@ static uint8_t check_arp_icmp(
 		/* header room + eth hdr size +
 		* src_aadr offset in ip header
 		*/
-		uint32_t dst_addr_offset = MBUF_HDR_ROOM +
+		uint32_t dst_addr_offset = FUN_MBUF_HDR_ROOM(pkt) +
 			ETH_HDR_SIZE + IP_HDR_DST_ADR_OFST;
 		uint32_t *dst_addr =
 			RTE_MBUF_METADATA_UINT32_PTR(pkt,
 			dst_addr_offset);
-		prot_offset = MBUF_HDR_ROOM + ETH_HDR_SIZE +
+		prot_offset = FUN_MBUF_HDR_ROOM(pkt) + ETH_HDR_SIZE +
 			IP_HDR_PROTOCOL_OFST;
 		protocol = RTE_MBUF_METADATA_UINT8_PTR(pkt,
 			prot_offset);
@@ -813,12 +813,12 @@ static uint8_t check_arp_icmp(
 		//uint32_t *dst_addr =
 		//	RTE_MBUF_METADATA_UINT32_PTR(pkt,
 		//	dst_addr_offset);
-		uint32_t prot_offset_ipv6 = MBUF_HDR_ROOM +
+		uint32_t prot_offset_ipv6 = FUN_MBUF_HDR_ROOM(pkt) +
 			ETH_HDR_SIZE + IPV6_HDR_PROTOCOL_OFST;
 		struct ipv6_hdr *ipv6_h;
 
-		ipv6_h = (struct ipv6_hdr *) MBUF_HDR_ROOM +
-			ETH_HDR_SIZE;
+		ipv6_h = (struct ipv6_hdr *) (((uint8_t*)pkt->buf_addr) + (pkt->data_off +
+			ETH_HDR_SIZE));
 		protocol = RTE_MBUF_METADATA_UINT8_PTR(pkt,
 			prot_offset_ipv6);
 
@@ -1178,9 +1178,9 @@ static pipeline_msg_req_handler custom_handlers[] = {
 static void
 convert_ipv6_to_ipv4(struct rte_mbuf *pkt, struct ipv6_hdr *in_ipv6_hdr)
 {
-	uint32_t ip_hdr_offset = MBUF_HDR_ROOM + ETH_HDR_SIZE;
+	uint32_t ip_hdr_offset = FUN_MBUF_HDR_ROOM(pkt) + ETH_HDR_SIZE;
 
-	uint8_t *eth_hdr_p = RTE_MBUF_METADATA_UINT8_PTR(pkt, MBUF_HDR_ROOM);
+	uint8_t *eth_hdr_p = RTE_MBUF_METADATA_UINT8_PTR(pkt, FUN_MBUF_HDR_ROOM(pkt));
 	uint8_t *ipv6_hdr_p = RTE_MBUF_METADATA_UINT8_PTR(pkt, ip_hdr_offset);
 
 	struct ether_hdr eth_hdr;
@@ -1284,9 +1284,9 @@ convert_ipv6_to_ipv4(struct rte_mbuf *pkt, struct ipv6_hdr *in_ipv6_hdr)
 static void
 convert_ipv4_to_ipv6(struct rte_mbuf *pkt, struct ipv4_hdr *in_ipv4_hdr)
 {
-	uint32_t ip_hdr_offset = MBUF_HDR_ROOM + ETH_HDR_SIZE;
+	uint32_t ip_hdr_offset = FUN_MBUF_HDR_ROOM(pkt) + ETH_HDR_SIZE;
 
-	uint8_t *eth_hdr_p = RTE_MBUF_METADATA_UINT8_PTR(pkt, MBUF_HDR_ROOM);
+	uint8_t *eth_hdr_p = RTE_MBUF_METADATA_UINT8_PTR(pkt, FUN_MBUF_HDR_ROOM(pkt));
 	uint8_t *ipv4_hdr_p = RTE_MBUF_METADATA_UINT8_PTR(pkt, ip_hdr_offset);
 
 	struct ether_hdr eth_hdr;
@@ -1411,7 +1411,7 @@ PIPELINE_CGNAPT_PORT_OUT_BAH(port_out_ah_cgnapt_bulk,
  */
 int rte_get_pkt_ver(struct rte_mbuf *pkt)
 {
-	uint32_t eth_proto_offset = MBUF_HDR_ROOM + 12;
+	uint32_t eth_proto_offset = FUN_MBUF_HDR_ROOM(pkt) + 12;
 	uint16_t *eth_proto =
 		RTE_MBUF_METADATA_UINT16_PTR(pkt, eth_proto_offset);
 
@@ -1558,8 +1558,9 @@ static int cgnapt_in_port_ah_mix(struct rte_pipeline *rte_p,
 
 	enum PKT_TYPE pkt_type = PKT_TYPE_IPV4;
 
-	src_port_offset = SRC_PRT_OFST_IP4_TCP;
-	dst_port_offset = DST_PRT_OFST_IP4_TCP;
+        //XXX need change,bug when pkts[0].data_off != pkts[i].data_off
+	src_port_offset = FUN_SRC_PRT_OFST_IP4_TCP(pkts[0]);
+	dst_port_offset = FUN_DST_PRT_OFST_IP4_TCP(pkts[0]);
 
 	for (i = 0; i < n_pkts; i++) {
 		p_nat->receivedPktCount++;
@@ -1594,9 +1595,9 @@ static int cgnapt_in_port_ah_mix(struct rte_pipeline *rte_p,
 			continue;
 		}
 		if (ver == 4)
-			prot_offset = PROT_OFST_IP4;
+			prot_offset = FUN_PROT_OFST_IP4(pkt);
 		else
-			prot_offset = PROT_OFST_IP6;
+			prot_offset = FUN_PROT_OFST_IP6(pkt);
 		protocol =
 			(uint8_t *) RTE_MBUF_METADATA_UINT32_PTR(pkt,
 					prot_offset);
@@ -1651,22 +1652,22 @@ static int cgnapt_in_port_ah_mix(struct rte_pipeline *rte_p,
 
 			src_addr =
 				RTE_MBUF_METADATA_UINT32_PTR(pkt,
-					SRC_ADR_OFST_IP4);
+					FUN_SRC_ADR_OFST_IP4(pkt));
 			dst_addr =
 				RTE_MBUF_METADATA_UINT32_PTR(pkt,
-					DST_ADR_OFST_IP4);
+					FUN_DST_ADR_OFST_IP4(pkt));
 
 			if ((*protocol == IP_PROTOCOL_TCP)
 				|| (*protocol == IP_PROTOCOL_UDP)) {
 
-				src_port_offset = SRC_PRT_OFST_IP4_TCP;
-				dst_port_offset = DST_PRT_OFST_IP4_TCP;
+				src_port_offset = FUN_SRC_PRT_OFST_IP4_TCP(pkt);
+				dst_port_offset = FUN_DST_PRT_OFST_IP4_TCP(pkt);
 
 			} else if (*protocol == IP_PROTOCOL_ICMP) {
 				/* Identifier */
-				src_port_offset = IDEN_OFST_IP4_ICMP;
+				src_port_offset = FUN_IDEN_OFST_IP4_ICMP(pkt);
 				/* Sequence number */
-				dst_port_offset = SEQN_OFST_IP4_ICMP;
+				dst_port_offset = FUN_SEQN_OFST_IP4_ICMP(pkt);
 			}
 
 			src_port =
@@ -1679,16 +1680,16 @@ static int cgnapt_in_port_ah_mix(struct rte_pipeline *rte_p,
 
 			src_addr =
 				RTE_MBUF_METADATA_UINT32_PTR(pkt,
-					SRC_ADR_OFST_IP6);
+					FUN_SRC_ADR_OFST_IP6(pkt));
 			dst_addr =
 				RTE_MBUF_METADATA_UINT32_PTR(pkt,
-					DST_ADR_OFST_IP6);
+					FUN_DST_ADR_OFST_IP6(pkt));
 			src_port =
 				RTE_MBUF_METADATA_UINT16_PTR(pkt,
-					SRC_PRT_OFST_IP6);
+					FUN_SRC_PRT_OFST_IP6(pkt));
 			dst_port =
 				RTE_MBUF_METADATA_UINT16_PTR(pkt,
-					DST_PRT_OFST_IP6);
+					FUN_DST_PRT_OFST_IP6(pkt));
 		}
 		/* need to create compacted table of pointers to
 		* pass to bulk lookup
@@ -1889,30 +1890,30 @@ static int cgnapt_in_port_ah_mix(struct rte_pipeline *rte_p,
 
 		if (ver == 6) {
 
-			src_port_offset = SRC_PRT_OFST_IP6t4;
-			dst_port_offset = DST_PRT_OFST_IP6t4;
-			src_addr_offset = SRC_ADR_OFST_IP6t4;
-			dst_addr_offset = DST_ADR_OFST_IP6t4;
-			prot_offset = PROT_OFST_IP6t4;
-			eth_offset = ETH_OFST_IP6t4;
+			src_port_offset = FUN_SRC_PRT_OFST_IP6t4(pkts[pkt_index]);
+			dst_port_offset = FUN_DST_PRT_OFST_IP6t4(pkts[pkt_index]);
+			src_addr_offset = FUN_SRC_ADR_OFST_IP6t4(pkts[pkt_index]);
+			dst_addr_offset = FUN_DST_ADR_OFST_IP6t4(pkts[pkt_index]);
+			prot_offset = FUN_PROT_OFST_IP6t4(pkts[pkt_index]);
+			eth_offset = FUN_ETH_OFST_IP6t4(pkts[pkt_index]);
 
 		} else {
 
 			if ((*protocol == IP_PROTOCOL_TCP)
 				|| (*protocol == IP_PROTOCOL_UDP)) {
-				src_port_offset = SRC_PRT_OFST_IP4_TCP;
-				dst_port_offset = DST_PRT_OFST_IP4_TCP;
+				src_port_offset = FUN_SRC_PRT_OFST_IP4_TCP(pkts[pkt_index]);
+				dst_port_offset = FUN_DST_PRT_OFST_IP4_TCP(pkts[pkt_index]);
 			} else if (*protocol == IP_PROTOCOL_ICMP) {
 				/* Identifier */
-				src_port_offset = IDEN_OFST_IP4_ICMP;
+				src_port_offset = FUN_IDEN_OFST_IP4_ICMP(pkts[pkt_index]);
 				/* Sequence number */
-				dst_port_offset = SEQN_OFST_IP4_ICMP;
+				dst_port_offset = FUN_SEQN_OFST_IP4_ICMP(pkts[pkt_index]);
 			}
 
-			src_addr_offset = SRC_ADR_OFST_IP4;
-			dst_addr_offset = DST_ADR_OFST_IP4;
-			prot_offset = PROT_OFST_IP4;
-			eth_offset = MBUF_HDR_ROOM;
+			src_addr_offset = FUN_SRC_ADR_OFST_IP4(pkts[pkt_index]);
+			dst_addr_offset = FUN_DST_ADR_OFST_IP4(pkts[pkt_index]);
+			prot_offset = FUN_PROT_OFST_IP4(pkts[pkt_index]);
+			eth_offset = FUN_MBUF_HDR_ROOM(pkts[pkt_index]);
 
 		}
 
@@ -2123,8 +2124,8 @@ static int cgnapt_in_port_ah_mix(struct rte_pipeline *rte_p,
 			eth_dest = eth_dest - 20;
 			eth_src = eth_src - 20;
 
-			dst_port_offset = DST_PRT_OFST_IP4t6;
-			dst_addr_offset = DST_ADR_OFST_IP4t6;
+			dst_port_offset = FUN_DST_PRT_OFST_IP4t6(pkts[pkt_index]);
+			dst_addr_offset = FUN_DST_ADR_OFST_IP4t6(pkts[pkt_index]);
 			dst_addr =
 				RTE_MBUF_METADATA_UINT32_PTR(
 					pkts[pkt_index],
@@ -2672,22 +2673,22 @@ pkt4_work_cgnapt_key_ipv4_prv(
 	uint64_t pkt_mask3 = 1LLU << (pkt_num + 3);
 
 	uint8_t protocol0 = RTE_MBUF_METADATA_UINT8(pkt[0],
-				PROT_OFST_IP4);
+				FUN_PROT_OFST_IP4(pkt[0]));
 	uint8_t protocol1 = RTE_MBUF_METADATA_UINT8(pkt[1],
-				PROT_OFST_IP4);
+				FUN_PROT_OFST_IP4(pkt[1]));
 	uint8_t protocol2 = RTE_MBUF_METADATA_UINT8(pkt[2],
-				PROT_OFST_IP4);
+				FUN_PROT_OFST_IP4(pkt[2]));
 	uint8_t protocol3 = RTE_MBUF_METADATA_UINT8(pkt[3],
-				PROT_OFST_IP4);
+				FUN_PROT_OFST_IP4(pkt[3]));
 
 	uint32_t src_addr0 = RTE_MBUF_METADATA_UINT32(pkt[0],
-				SRC_ADR_OFST_IP4);
+				FUN_SRC_ADR_OFST_IP4(pkt[0]));
 	uint32_t src_addr1 = RTE_MBUF_METADATA_UINT32(pkt[1],
-				SRC_ADR_OFST_IP4);
+				FUN_SRC_ADR_OFST_IP4(pkt[1]));
 	uint32_t src_addr2 = RTE_MBUF_METADATA_UINT32(pkt[2],
-				SRC_ADR_OFST_IP4);
+				FUN_SRC_ADR_OFST_IP4(pkt[2]));
 	uint32_t src_addr3 = RTE_MBUF_METADATA_UINT32(pkt[3],
-				SRC_ADR_OFST_IP4);
+				FUN_SRC_ADR_OFST_IP4(pkt[3]));
 
 	uint16_t src_port_offset0;
 	uint16_t src_port_offset1;
@@ -2734,7 +2735,7 @@ pkt4_work_cgnapt_key_ipv4_prv(
 
 		udp = (struct udp_hdr *)
 			RTE_MBUF_METADATA_UINT8_PTR(pkt[0],
-						IPV4_UDP_OFST);
+						FUN_IPV4_UDP_OFST(pkt[0]));
 
 		if (rte_bswap16(udp->dst_port) ==
 			PCP_SERVER_PORT) {
@@ -2747,7 +2748,7 @@ pkt4_work_cgnapt_key_ipv4_prv(
 	}
 	case IP_PROTOCOL_TCP:
 
-		src_port_offset0 = SRC_PRT_OFST_IP4_TCP;
+		src_port_offset0 = FUN_SRC_PRT_OFST_IP4_TCP(pkt[0]);
 		src_port0 = RTE_MBUF_METADATA_UINT16(pkt[0],
 				src_port_offset0);
 
@@ -2755,7 +2756,7 @@ pkt4_work_cgnapt_key_ipv4_prv(
 
 	case IP_PROTOCOL_ICMP:
 		 /* Identifier */
-		 src_port_offset0 = MBUF_HDR_ROOM + ETH_HDR_SIZE +
+		 src_port_offset0 = FUN_MBUF_HDR_ROOM(pkt[0]) + ETH_HDR_SIZE +
 					 IP_HDR_SIZE + 4;
 		 src_port0 = RTE_MBUF_METADATA_UINT16(pkt[0],
 				src_port_offset0);
@@ -2807,7 +2808,7 @@ PKT1:
 
 		udp = (struct udp_hdr *)
 			RTE_MBUF_METADATA_UINT8_PTR(pkt[1],
-						IPV4_UDP_OFST);
+						FUN_IPV4_UDP_OFST(pkt[1]));
 
 		if (rte_bswap16(udp->dst_port) ==
 			PCP_SERVER_PORT) {
@@ -2820,7 +2821,7 @@ PKT1:
 	}
 	case IP_PROTOCOL_TCP:
 
-		src_port_offset1 = SRC_PRT_OFST_IP4_TCP;
+		src_port_offset1 = FUN_SRC_PRT_OFST_IP4_TCP(pkt[1]);
 		src_port1 = RTE_MBUF_METADATA_UINT16(pkt[1],
 				src_port_offset1);
 
@@ -2828,7 +2829,7 @@ PKT1:
 
 	case IP_PROTOCOL_ICMP:
 		 /* Identifier */
-		 src_port_offset1 = MBUF_HDR_ROOM + ETH_HDR_SIZE +
+		 src_port_offset1 = FUN_MBUF_HDR_ROOM(pkt[1]) + ETH_HDR_SIZE +
 					 IP_HDR_SIZE + 4;
 		 src_port1 = RTE_MBUF_METADATA_UINT16(pkt[1],
 				src_port_offset1);
@@ -2880,7 +2881,7 @@ PKT2:
 
 		udp = (struct udp_hdr *)
 			RTE_MBUF_METADATA_UINT8_PTR(pkt[2],
-						IPV4_UDP_OFST);
+						FUN_IPV4_UDP_OFST(pkt[2]));
 
 		if (rte_bswap16(udp->dst_port) ==
 			PCP_SERVER_PORT) {
@@ -2893,7 +2894,7 @@ PKT2:
 	}
 	case IP_PROTOCOL_TCP:
 
-		src_port_offset2 = SRC_PRT_OFST_IP4_TCP;
+		src_port_offset2 = FUN_SRC_PRT_OFST_IP4_TCP(pkt[2]);
 		src_port2 = RTE_MBUF_METADATA_UINT16(pkt[2],
 				src_port_offset2);
 
@@ -2901,7 +2902,7 @@ PKT2:
 
 	case IP_PROTOCOL_ICMP:
 		 /* Identifier */
-		 src_port_offset2 = MBUF_HDR_ROOM + ETH_HDR_SIZE +
+		 src_port_offset2 = FUN_MBUF_HDR_ROOM(pkt[2]) + ETH_HDR_SIZE +
 					 IP_HDR_SIZE + 4;
 		 src_port2 = RTE_MBUF_METADATA_UINT16(pkt[2],
 				src_port_offset2);
@@ -2952,7 +2953,7 @@ PKT3:
 
 		udp = (struct udp_hdr *)
 			RTE_MBUF_METADATA_UINT8_PTR(pkt[3],
-						IPV4_UDP_OFST);
+						FUN_IPV4_UDP_OFST(pkt[3]));
 
 		if (rte_bswap16(udp->dst_port) ==
 			PCP_SERVER_PORT) {
@@ -2965,7 +2966,7 @@ PKT3:
 	}
 	case IP_PROTOCOL_TCP:
 
-		src_port_offset3 = SRC_PRT_OFST_IP4_TCP;
+		src_port_offset3 = FUN_SRC_PRT_OFST_IP4_TCP(pkt[3]);
 		src_port3 = RTE_MBUF_METADATA_UINT16(pkt[3],
 				src_port_offset3);
 
@@ -2973,7 +2974,7 @@ PKT3:
 
 	case IP_PROTOCOL_ICMP:
 		 /* Identifier */
-		 src_port_offset3 = MBUF_HDR_ROOM + ETH_HDR_SIZE +
+		 src_port_offset3 = FUN_MBUF_HDR_ROOM(pkt[3]) + ETH_HDR_SIZE +
 					 IP_HDR_SIZE + 4;
 		 src_port3 = RTE_MBUF_METADATA_UINT16(pkt[3],
 				src_port_offset3);
@@ -3034,22 +3035,22 @@ pkt4_work_cgnapt_key_ipv4_pub(
 	uint64_t pkt_mask3 = 1LLU << (pkt_num + 3);
 
 	uint8_t protocol0 = RTE_MBUF_METADATA_UINT8(pkt[0],
-				PROT_OFST_IP4);
+				FUN_PROT_OFST_IP4(pkt[0]));
 	uint8_t protocol1 = RTE_MBUF_METADATA_UINT8(pkt[1],
-				PROT_OFST_IP4);
+				FUN_PROT_OFST_IP4(pkt[1]));
 	uint8_t protocol2 = RTE_MBUF_METADATA_UINT8(pkt[2],
-				PROT_OFST_IP4);
+				FUN_PROT_OFST_IP4(pkt[2]));
 	uint8_t protocol3 = RTE_MBUF_METADATA_UINT8(pkt[3],
-				PROT_OFST_IP4);
+				FUN_PROT_OFST_IP4(pkt[3]));
 
 	uint32_t dst_addr0 = RTE_MBUF_METADATA_UINT32(pkt[0],
-				DST_ADR_OFST_IP4);
+				FUN_DST_ADR_OFST_IP4(pkt[0]));
 	uint32_t dst_addr1 = RTE_MBUF_METADATA_UINT32(pkt[1],
-				DST_ADR_OFST_IP4);
+				FUN_DST_ADR_OFST_IP4(pkt[1]));
 	uint32_t dst_addr2 = RTE_MBUF_METADATA_UINT32(pkt[2],
-				DST_ADR_OFST_IP4);
+				FUN_DST_ADR_OFST_IP4(pkt[2]));
 	uint32_t dst_addr3 = RTE_MBUF_METADATA_UINT32(pkt[3],
-				DST_ADR_OFST_IP4);
+				FUN_DST_ADR_OFST_IP4(pkt[3]));
 
 	uint16_t src_port_offset0;
 	uint16_t src_port_offset1;
@@ -3096,8 +3097,8 @@ pkt4_work_cgnapt_key_ipv4_pub(
 	case IP_PROTOCOL_UDP:
 	case IP_PROTOCOL_TCP:
 
-		src_port_offset0 = SRC_PRT_OFST_IP4_TCP;
-		dst_port_offset0 = DST_PRT_OFST_IP4_TCP;
+		src_port_offset0 = FUN_SRC_PRT_OFST_IP4_TCP(pkt[0]);
+		dst_port_offset0 = FUN_DST_PRT_OFST_IP4_TCP(pkt[0]);
 
 		src_port0 = RTE_MBUF_METADATA_UINT16(pkt[0],
 				src_port_offset0);
@@ -3110,10 +3111,10 @@ pkt4_work_cgnapt_key_ipv4_pub(
 
 	case IP_PROTOCOL_ICMP:
 		 /* Identifier */
-		src_port_offset0 = MBUF_HDR_ROOM + ETH_HDR_SIZE +
+		src_port_offset0 = FUN_MBUF_HDR_ROOM(pkt[0]) + ETH_HDR_SIZE +
 					 IP_HDR_SIZE + 4;
 		/*Sequence number */
-		dst_port_offset0 = MBUF_HDR_ROOM + ETH_HDR_SIZE +
+		dst_port_offset0 = FUN_MBUF_HDR_ROOM(pkt[0]) + ETH_HDR_SIZE +
 					 IP_HDR_SIZE + 6;
 
 		src_port0 = RTE_MBUF_METADATA_UINT16(pkt[0],
@@ -3165,8 +3166,8 @@ PKT1:
 	case IP_PROTOCOL_UDP:
 	case IP_PROTOCOL_TCP:
 
-		src_port_offset1 = SRC_PRT_OFST_IP4_TCP;
-		dst_port_offset1 = DST_PRT_OFST_IP4_TCP;
+		src_port_offset1 = FUN_SRC_PRT_OFST_IP4_TCP(pkt[1]);
+		dst_port_offset1 = FUN_DST_PRT_OFST_IP4_TCP(pkt[1]);
 
 		src_port1 = RTE_MBUF_METADATA_UINT16(pkt[1],
 				src_port_offset1);
@@ -3179,10 +3180,10 @@ PKT1:
 
 	case IP_PROTOCOL_ICMP:
 		 /* Identifier */
-		 src_port_offset1 = MBUF_HDR_ROOM + ETH_HDR_SIZE +
+		 src_port_offset1 = FUN_MBUF_HDR_ROOM(pkt[1]) + ETH_HDR_SIZE +
 					 IP_HDR_SIZE + 4;
 		 /*Sequence number */
-		 dst_port_offset1 = MBUF_HDR_ROOM + ETH_HDR_SIZE +
+		 dst_port_offset1 = FUN_MBUF_HDR_ROOM(pkt[1]) + ETH_HDR_SIZE +
 					 IP_HDR_SIZE + 6;
 
 		 src_port1 = RTE_MBUF_METADATA_UINT16(pkt[1],
@@ -3232,8 +3233,8 @@ PKT2:
 	case IP_PROTOCOL_UDP:
 	case IP_PROTOCOL_TCP:
 
-		src_port_offset2 = SRC_PRT_OFST_IP4_TCP;
-		dst_port_offset2 = DST_PRT_OFST_IP4_TCP;
+		src_port_offset2 = FUN_SRC_PRT_OFST_IP4_TCP(pkt[2]);
+		dst_port_offset2 = FUN_DST_PRT_OFST_IP4_TCP(pkt[2]);
 
 		src_port2 = RTE_MBUF_METADATA_UINT16(pkt[2],
 				src_port_offset2);
@@ -3246,10 +3247,10 @@ PKT2:
 
 	case IP_PROTOCOL_ICMP:
 		 /* Identifier */
-		 src_port_offset2 = MBUF_HDR_ROOM + ETH_HDR_SIZE +
+		 src_port_offset2 = FUN_MBUF_HDR_ROOM(pkt[2]) + ETH_HDR_SIZE +
 					 IP_HDR_SIZE + 4;
 		 /*Sequence number */
-		 dst_port_offset2 = MBUF_HDR_ROOM + ETH_HDR_SIZE +
+		 dst_port_offset2 = FUN_MBUF_HDR_ROOM(pkt[2]) + ETH_HDR_SIZE +
 					 IP_HDR_SIZE + 6;
 
 		 src_port2 = RTE_MBUF_METADATA_UINT16(pkt[2],
@@ -3300,8 +3301,8 @@ PKT3:
 	case IP_PROTOCOL_UDP:
 	case IP_PROTOCOL_TCP:
 
-		src_port_offset3 = SRC_PRT_OFST_IP4_TCP;
-		dst_port_offset3 = DST_PRT_OFST_IP4_TCP;
+		src_port_offset3 = FUN_SRC_PRT_OFST_IP4_TCP(pkt[3]);
+		dst_port_offset3 = FUN_DST_PRT_OFST_IP4_TCP(pkt[3]);
 
 		src_port3 = RTE_MBUF_METADATA_UINT16(pkt[3],
 				src_port_offset3);
@@ -3314,10 +3315,10 @@ PKT3:
 
 	case IP_PROTOCOL_ICMP:
 		 /* Identifier */
-		 src_port_offset3 = MBUF_HDR_ROOM + ETH_HDR_SIZE +
+		 src_port_offset3 = FUN_MBUF_HDR_ROOM(pkt[3]) + ETH_HDR_SIZE +
 					 IP_HDR_SIZE + 4;
 		 /*Sequence number */
-		 dst_port_offset3 = MBUF_HDR_ROOM + ETH_HDR_SIZE +
+		 dst_port_offset3 = FUN_MBUF_HDR_ROOM(pkt[3]) + ETH_HDR_SIZE +
 					 IP_HDR_SIZE + 6;
 
 		 src_port3 = RTE_MBUF_METADATA_UINT16(pkt[3],
@@ -3379,9 +3380,9 @@ pkt_work_cgnapt_key_ipv4_prv(
 
 	/* bitmask representing only this packet */
 	uint64_t pkt_mask = 1LLU << pkt_num;
-	uint8_t protocol = RTE_MBUF_METADATA_UINT8(pkt, PROT_OFST_IP4);
+	uint8_t protocol = RTE_MBUF_METADATA_UINT8(pkt, FUN_PROT_OFST_IP4(pkt));
 
-	uint32_t src_addr = RTE_MBUF_METADATA_UINT32(pkt, SRC_ADR_OFST_IP4);
+	uint32_t src_addr = RTE_MBUF_METADATA_UINT32(pkt, FUN_SRC_ADR_OFST_IP4(pkt));
 
 	uint16_t src_port_offset;
 
@@ -3412,7 +3413,7 @@ pkt_work_cgnapt_key_ipv4_prv(
 
 		udp = (struct udp_hdr *)
 			RTE_MBUF_METADATA_UINT8_PTR(pkt,
-						IPV4_UDP_OFST);
+						FUN_IPV4_UDP_OFST(pkt));
 
 		if (rte_bswap16(udp->dst_port) ==
 			PCP_SERVER_PORT) {
@@ -3425,7 +3426,7 @@ pkt_work_cgnapt_key_ipv4_prv(
 	}
 	case IP_PROTOCOL_TCP:
 
-		src_port_offset = SRC_PRT_OFST_IP4_TCP;
+		src_port_offset = FUN_SRC_PRT_OFST_IP4_TCP(pkt);
 		src_port = RTE_MBUF_METADATA_UINT16(pkt, src_port_offset);
 
 		key.port = rte_bswap16(src_port);
@@ -3433,7 +3434,7 @@ pkt_work_cgnapt_key_ipv4_prv(
 	break;
 	case IP_PROTOCOL_ICMP:
 		/* Identifier */
-		src_port_offset = MBUF_HDR_ROOM + ETH_HDR_SIZE +
+		src_port_offset = FUN_MBUF_HDR_ROOM(pkt) + ETH_HDR_SIZE +
 					IP_HDR_SIZE + 4;
 		src_port = RTE_MBUF_METADATA_UINT16(pkt, src_port_offset);
 
@@ -3489,8 +3490,8 @@ pkt_work_cgnapt_key_ipv4_pub(
 
 	/* bitmask representing only this packet */
 	uint64_t pkt_mask = 1LLU << pkt_num;
-	uint8_t protocol = RTE_MBUF_METADATA_UINT8(pkt, PROT_OFST_IP4);
-	uint32_t dst_addr = RTE_MBUF_METADATA_UINT32(pkt, DST_ADR_OFST_IP4);
+	uint8_t protocol = RTE_MBUF_METADATA_UINT8(pkt, FUN_PROT_OFST_IP4(pkt));
+	uint32_t dst_addr = RTE_MBUF_METADATA_UINT32(pkt, FUN_DST_ADR_OFST_IP4(pkt));
 	uint16_t src_port_offset;
 	uint16_t dst_port_offset;
 	uint16_t src_port;
@@ -3511,8 +3512,8 @@ pkt_work_cgnapt_key_ipv4_pub(
 	switch (protocol) {
 	case IP_PROTOCOL_UDP:
 	case IP_PROTOCOL_TCP:
-		src_port_offset = SRC_PRT_OFST_IP4_TCP;
-		dst_port_offset = DST_PRT_OFST_IP4_TCP;
+		src_port_offset = FUN_SRC_PRT_OFST_IP4_TCP(pkt);
+		dst_port_offset = FUN_DST_PRT_OFST_IP4_TCP(pkt);
 
 		src_port = RTE_MBUF_METADATA_UINT16(pkt, src_port_offset);
 		dst_port = RTE_MBUF_METADATA_UINT16(pkt, dst_port_offset);
@@ -3521,9 +3522,9 @@ pkt_work_cgnapt_key_ipv4_pub(
 	break;
 	case IP_PROTOCOL_ICMP:
 		/* Identifier */
-		src_port_offset = MBUF_HDR_ROOM + ETH_HDR_SIZE +
+		src_port_offset = FUN_MBUF_HDR_ROOM(pkt) + ETH_HDR_SIZE +
 					IP_HDR_SIZE + 4;
-		dst_port_offset = MBUF_HDR_ROOM + ETH_HDR_SIZE +
+		dst_port_offset = FUN_MBUF_HDR_ROOM(pkt) + ETH_HDR_SIZE +
 					IP_HDR_SIZE + 6;
 
 		src_port = RTE_MBUF_METADATA_UINT16(pkt, src_port_offset);
@@ -3592,7 +3593,7 @@ pkt_work_cgnapt_ipv4_prv(
 	uint64_t pkt_mask = 1LLU << pkt_num;
 	struct rte_mbuf *pkt = pkts[pkt_num];
 
-	uint8_t protocol = RTE_MBUF_METADATA_UINT8(pkt, PROT_OFST_IP4);
+	uint8_t protocol = RTE_MBUF_METADATA_UINT8(pkt, FUN_PROT_OFST_IP4(pkt));
 
 	uint32_t dest_if = INVALID_DESTIF;	/* Added for Multiport */
 	uint16_t *outport_id =
@@ -3650,9 +3651,9 @@ pkt_work_cgnapt_ipv4_prv(
 	p_nat->entries[pkt_num] = &(entry->head);
 
 	uint32_t *src_addr =
-		RTE_MBUF_METADATA_UINT32_PTR(pkt, SRC_ADR_OFST_IP4);
+		RTE_MBUF_METADATA_UINT32_PTR(pkt, FUN_SRC_ADR_OFST_IP4(pkt));
 	uint32_t *dst_addr =
-		RTE_MBUF_METADATA_UINT32_PTR(pkt, DST_ADR_OFST_IP4);
+		RTE_MBUF_METADATA_UINT32_PTR(pkt, FUN_DST_ADR_OFST_IP4(pkt));
 	uint16_t src_port_offset = 0;
 	uint16_t dst_port_offset = 0;
 	uint16_t *src_port;
@@ -3660,8 +3661,8 @@ pkt_work_cgnapt_ipv4_prv(
 
 	switch (protocol) {
 	case IP_PROTOCOL_TCP:
-		src_port_offset = SRC_PRT_OFST_IP4_TCP;
-		dst_port_offset = DST_PRT_OFST_IP4_TCP;
+		src_port_offset = FUN_SRC_PRT_OFST_IP4_TCP(pkt);
+		dst_port_offset = FUN_DST_PRT_OFST_IP4_TCP(pkt);
 		src_port = RTE_MBUF_METADATA_UINT16_PTR(pkt, src_port_offset);
 		dst_port = RTE_MBUF_METADATA_UINT16_PTR(pkt, dst_port_offset);
 
@@ -3680,31 +3681,31 @@ pkt_work_cgnapt_ipv4_prv(
 		#endif
 	break;
 	case IP_PROTOCOL_UDP:
-		src_port_offset = SRC_PRT_OFST_IP4_TCP;
-		dst_port_offset = DST_PRT_OFST_IP4_TCP;
+		src_port_offset = FUN_SRC_PRT_OFST_IP4_TCP(pkt);
+		dst_port_offset = FUN_DST_PRT_OFST_IP4_TCP(pkt);
 		src_port = RTE_MBUF_METADATA_UINT16_PTR(pkt, src_port_offset);
 		dst_port = RTE_MBUF_METADATA_UINT16_PTR(pkt, dst_port_offset);
 	break;
 	case IP_PROTOCOL_ICMP:
 		/* Identifier */
-		src_port_offset = MBUF_HDR_ROOM + ETH_HDR_SIZE +
+		src_port_offset = FUN_MBUF_HDR_ROOM(pkt) + ETH_HDR_SIZE +
 					IP_HDR_SIZE + 4;
 		/*Sequence number */
-		dst_port_offset = MBUF_HDR_ROOM + ETH_HDR_SIZE +
+		dst_port_offset = FUN_MBUF_HDR_ROOM(pkt) + ETH_HDR_SIZE +
 					IP_HDR_SIZE + 6;
 		src_port = RTE_MBUF_METADATA_UINT16_PTR(pkt, src_port_offset);
 		dst_port = RTE_MBUF_METADATA_UINT16_PTR(pkt, dst_port_offset);
 	break;
 	default: /* KW fix: unknown is treated as TCP/UDP */
-		src_port_offset = SRC_PRT_OFST_IP4_TCP;
-		dst_port_offset = DST_PRT_OFST_IP4_TCP;
+		src_port_offset = FUN_SRC_PRT_OFST_IP4_TCP(pkt);
+		dst_port_offset = FUN_DST_PRT_OFST_IP4_TCP(pkt);
 		src_port = RTE_MBUF_METADATA_UINT16_PTR(pkt, src_port_offset);
 		dst_port = RTE_MBUF_METADATA_UINT16_PTR(pkt, dst_port_offset);
 	break;
 	}
 
-	uint8_t *eth_dest = RTE_MBUF_METADATA_UINT8_PTR(pkt, MBUF_HDR_ROOM);
-	uint8_t *eth_src = RTE_MBUF_METADATA_UINT8_PTR(pkt, MBUF_HDR_ROOM + 6);
+	uint8_t *eth_dest = RTE_MBUF_METADATA_UINT8_PTR(pkt, FUN_MBUF_HDR_ROOM(pkt));
+	uint8_t *eth_src = RTE_MBUF_METADATA_UINT8_PTR(pkt, FUN_MBUF_HDR_ROOM(pkt) + 6);
 
 	if (entry->data.ttl == NAPT_ENTRY_STALE)
 		entry->data.ttl = NAPT_ENTRY_VALID;
@@ -3973,7 +3974,7 @@ pkt_work_cgnapt_ipv4_pub(
 	uint64_t pkt_mask = 1LLU << pkt_num;
 	struct rte_mbuf *pkt = pkts[pkt_num];
 
-	uint8_t protocol = RTE_MBUF_METADATA_UINT8(pkt, PROT_OFST_IP4);
+	uint8_t protocol = RTE_MBUF_METADATA_UINT8(pkt, FUN_PROT_OFST_IP4(pkt));
 
 	uint32_t dest_if = INVALID_DESTIF;	/* Added for Multiport */
 	uint16_t *outport_id =
@@ -4031,20 +4032,20 @@ pkt_work_cgnapt_ipv4_pub(
 	p_nat->entries[pkt_num] = &(entry->head);
 
 	uint32_t *dst_addr =
-		RTE_MBUF_METADATA_UINT32_PTR(pkt, DST_ADR_OFST_IP4);
+		RTE_MBUF_METADATA_UINT32_PTR(pkt, FUN_DST_ADR_OFST_IP4(pkt));
 	uint16_t src_port_offset = 0;
 	uint16_t dst_port_offset = 0;
 
 	if ((protocol == IP_PROTOCOL_TCP) || (protocol == IP_PROTOCOL_UDP)) {
-		src_port_offset = SRC_PRT_OFST_IP4_TCP;
-		dst_port_offset = DST_PRT_OFST_IP4_TCP;
+		src_port_offset = FUN_SRC_PRT_OFST_IP4_TCP(pkt);
+		dst_port_offset = FUN_DST_PRT_OFST_IP4_TCP(pkt);
 	} else if (protocol == IP_PROTOCOL_ICMP) {
 		/* Identifier */
-		src_port_offset = MBUF_HDR_ROOM +
+		src_port_offset = FUN_MBUF_HDR_ROOM(pkt) +
 					ETH_HDR_SIZE +
 					IP_HDR_SIZE + 4;
 		/*Sequence number */
-		dst_port_offset = MBUF_HDR_ROOM +
+		dst_port_offset = FUN_MBUF_HDR_ROOM(pkt) +
 					ETH_HDR_SIZE +
 					IP_HDR_SIZE + 6;
 	}
@@ -4052,8 +4053,8 @@ pkt_work_cgnapt_ipv4_pub(
 	uint16_t *src_port = RTE_MBUF_METADATA_UINT16_PTR(pkt, src_port_offset);
 	uint16_t *dst_port = RTE_MBUF_METADATA_UINT16_PTR(pkt, dst_port_offset);
 
-	uint8_t *eth_dest = RTE_MBUF_METADATA_UINT8_PTR(pkt, MBUF_HDR_ROOM);
-	uint8_t *eth_src = RTE_MBUF_METADATA_UINT8_PTR(pkt, MBUF_HDR_ROOM + 6);
+	uint8_t *eth_dest = RTE_MBUF_METADATA_UINT8_PTR(pkt, FUN_MBUF_HDR_ROOM(pkt));
+	uint8_t *eth_src = RTE_MBUF_METADATA_UINT8_PTR(pkt, FUN_MBUF_HDR_ROOM(pkt) + 6);
 
 	if (entry->data.ttl == NAPT_ENTRY_STALE)
 		entry->data.ttl = NAPT_ENTRY_VALID;
@@ -4357,7 +4358,7 @@ pkt4_work_cgnapt_ipv4_prv(
 		/*bitmask representing only this packet */
 		uint64_t pkt_mask = 1LLU << pkt_num;
 
-		uint8_t protocol = RTE_MBUF_METADATA_UINT8(pkt, PROT_OFST_IP4);
+		uint8_t protocol = RTE_MBUF_METADATA_UINT8(pkt, FUN_PROT_OFST_IP4(pkt));
 
 		uint16_t *outport_id =
 			RTE_MBUF_METADATA_UINT16_PTR(pkt, cgnapt_meta_offset);
@@ -4415,9 +4416,9 @@ pkt4_work_cgnapt_ipv4_prv(
 		p_nat->entries[pkt_num] = &(entry->head);
 
 		uint32_t *src_addr =
-			RTE_MBUF_METADATA_UINT32_PTR(pkt, SRC_ADR_OFST_IP4);
+			RTE_MBUF_METADATA_UINT32_PTR(pkt, FUN_SRC_ADR_OFST_IP4(pkt));
 		uint32_t *dst_addr =
-			RTE_MBUF_METADATA_UINT32_PTR(pkt, DST_ADR_OFST_IP4);
+			RTE_MBUF_METADATA_UINT32_PTR(pkt, FUN_DST_ADR_OFST_IP4(pkt));
 		uint16_t src_port_offset = 0;
 		uint16_t dst_port_offset = 0;
 		uint16_t *src_port;
@@ -4442,8 +4443,8 @@ pkt4_work_cgnapt_ipv4_prv(
 
 		switch (protocol) {
 		case IP_PROTOCOL_TCP:
-			src_port_offset = SRC_PRT_OFST_IP4_TCP;
-			dst_port_offset = DST_PRT_OFST_IP4_TCP;
+			src_port_offset = FUN_SRC_PRT_OFST_IP4_TCP(pkt);
+			dst_port_offset = FUN_DST_PRT_OFST_IP4_TCP(pkt);
 			src_port = RTE_MBUF_METADATA_UINT16_PTR(pkt,
 						src_port_offset);
 			dst_port = RTE_MBUF_METADATA_UINT16_PTR(pkt,
@@ -4468,8 +4469,8 @@ pkt4_work_cgnapt_ipv4_prv(
 			#endif
 		break;
 		case IP_PROTOCOL_UDP:
-			src_port_offset = SRC_PRT_OFST_IP4_TCP;
-			dst_port_offset = DST_PRT_OFST_IP4_TCP;
+			src_port_offset = FUN_SRC_PRT_OFST_IP4_TCP(pkt);
+			dst_port_offset = FUN_DST_PRT_OFST_IP4_TCP(pkt);
 			src_port = RTE_MBUF_METADATA_UINT16_PTR(pkt,
 					src_port_offset);
 			dst_port = RTE_MBUF_METADATA_UINT16_PTR(pkt,
@@ -4477,10 +4478,10 @@ pkt4_work_cgnapt_ipv4_prv(
 		break;
 		case IP_PROTOCOL_ICMP:
 			/* Identifier */
-			src_port_offset = MBUF_HDR_ROOM + ETH_HDR_SIZE +
+			src_port_offset = FUN_MBUF_HDR_ROOM(pkt) + ETH_HDR_SIZE +
 						IP_HDR_SIZE + 4;
 			/*Sequence number */
-			dst_port_offset = MBUF_HDR_ROOM + ETH_HDR_SIZE +
+			dst_port_offset = FUN_MBUF_HDR_ROOM(pkt) + ETH_HDR_SIZE +
 						IP_HDR_SIZE + 6;
 			src_port = RTE_MBUF_METADATA_UINT16_PTR(pkt,
 					src_port_offset);
@@ -4488,8 +4489,8 @@ pkt4_work_cgnapt_ipv4_prv(
 					dst_port_offset);
 		break;
 		default: /* KW fix: unknown is treated as TCP/UDP */
-			src_port_offset = SRC_PRT_OFST_IP4_TCP;
-			dst_port_offset = DST_PRT_OFST_IP4_TCP;
+			src_port_offset = FUN_SRC_PRT_OFST_IP4_TCP(pkt);
+			dst_port_offset = FUN_DST_PRT_OFST_IP4_TCP(pkt);
 			src_port = RTE_MBUF_METADATA_UINT16_PTR(pkt,
 					src_port_offset);
 			dst_port = RTE_MBUF_METADATA_UINT16_PTR(pkt,
@@ -4499,9 +4500,9 @@ pkt4_work_cgnapt_ipv4_prv(
 
 
 		uint8_t *eth_dest =
-			RTE_MBUF_METADATA_UINT8_PTR(pkt, MBUF_HDR_ROOM);
+			RTE_MBUF_METADATA_UINT8_PTR(pkt, FUN_MBUF_HDR_ROOM(pkt));
 		uint8_t *eth_src =
-			RTE_MBUF_METADATA_UINT8_PTR(pkt, MBUF_HDR_ROOM + 6);
+			RTE_MBUF_METADATA_UINT8_PTR(pkt, FUN_MBUF_HDR_ROOM(pkt) + 6);
 
 		if (entry->data.ttl == NAPT_ENTRY_STALE)
 			entry->data.ttl = NAPT_ENTRY_VALID;
@@ -4789,7 +4790,7 @@ pkt4_work_cgnapt_ipv4_pub(
 		/*bitmask representing only this packet */
 		uint64_t pkt_mask = 1LLU << pkt_num;
 
-		uint8_t protocol = RTE_MBUF_METADATA_UINT8(pkt, PROT_OFST_IP4);
+		uint8_t protocol = RTE_MBUF_METADATA_UINT8(pkt, FUN_PROT_OFST_IP4(pkt));
 
 		uint32_t dest_if = INVALID_DESTIF;	/* Added for Multiport */
 		uint16_t *outport_id =
@@ -4848,21 +4849,21 @@ pkt4_work_cgnapt_ipv4_pub(
 		p_nat->entries[pkt_num] = &(entry->head);
 
 		uint32_t *dst_addr =
-			RTE_MBUF_METADATA_UINT32_PTR(pkt, DST_ADR_OFST_IP4);
+			RTE_MBUF_METADATA_UINT32_PTR(pkt, FUN_DST_ADR_OFST_IP4(pkt));
 		uint16_t src_port_offset = 0;
 		uint16_t dst_port_offset = 0;
 
 		if ((protocol == IP_PROTOCOL_TCP)
 			|| (protocol == IP_PROTOCOL_UDP)) {
-			src_port_offset = SRC_PRT_OFST_IP4_TCP;
-			dst_port_offset = DST_PRT_OFST_IP4_TCP;
+			src_port_offset = FUN_SRC_PRT_OFST_IP4_TCP(pkt);
+			dst_port_offset = FUN_DST_PRT_OFST_IP4_TCP(pkt);
 		} else if (protocol == IP_PROTOCOL_ICMP) {
 			/* Identifier */
-			src_port_offset = MBUF_HDR_ROOM +
+			src_port_offset = FUN_MBUF_HDR_ROOM(pkt) +
 						ETH_HDR_SIZE +
 						IP_HDR_SIZE + 4;
 			/*Sequence number */
-			dst_port_offset = MBUF_HDR_ROOM +
+			dst_port_offset = FUN_MBUF_HDR_ROOM(pkt) +
 						ETH_HDR_SIZE +
 						IP_HDR_SIZE + 6;
 		}
@@ -4873,9 +4874,9 @@ pkt4_work_cgnapt_ipv4_pub(
 			RTE_MBUF_METADATA_UINT16_PTR(pkt, dst_port_offset);
 
 		uint8_t *eth_dest =
-			RTE_MBUF_METADATA_UINT8_PTR(pkt, MBUF_HDR_ROOM);
+			RTE_MBUF_METADATA_UINT8_PTR(pkt, FUN_MBUF_HDR_ROOM(pkt));
 		uint8_t *eth_src =
-			RTE_MBUF_METADATA_UINT8_PTR(pkt, MBUF_HDR_ROOM + 6);
+			RTE_MBUF_METADATA_UINT8_PTR(pkt, FUN_MBUF_HDR_ROOM(pkt) + 6);
 
 		if (entry->data.ttl == NAPT_ENTRY_STALE)
 			entry->data.ttl = NAPT_ENTRY_VALID;
@@ -5159,10 +5160,10 @@ pkt_work_cgnapt_key_ipv6_prv(
 	/* bitmask representing only this packet */
 	uint64_t pkt_mask = 1LLU << pkt_num;
 
-	uint8_t protocol = RTE_MBUF_METADATA_UINT8(pkt, PROT_OFST_IP6);
+	uint8_t protocol = RTE_MBUF_METADATA_UINT8(pkt, FUN_PROT_OFST_IP6(pkt));
 	uint32_t *src_addr = RTE_MBUF_METADATA_UINT32_PTR(pkt,
-				SRC_ADR_OFST_IP6);
-	uint16_t src_port = RTE_MBUF_METADATA_UINT16(pkt, SRC_PRT_OFST_IP6);
+				FUN_SRC_ADR_OFST_IP6(pkt));
+	uint16_t src_port = RTE_MBUF_METADATA_UINT16(pkt, FUN_SRC_PRT_OFST_IP6(pkt));
 
 	uint16_t phy_port = pkt->port;
 	struct pipeline_cgnapt_entry_key key;
@@ -5188,7 +5189,7 @@ pkt_work_cgnapt_key_ipv6_prv(
 
 		udp = (struct udp_hdr *)
 			RTE_MBUF_METADATA_UINT8_PTR(pkt,
-						IPV6_UDP_OFST);
+						FUN_IPV6_UDP_OFST(pkt));
 
 		if (rte_bswap16(udp->dst_port) ==
 			PCP_SERVER_PORT) {
@@ -5258,12 +5259,12 @@ pkt_work_cgnapt_key_ipv6_pub(
 	/* bitmask representing only this packet */
 	uint64_t pkt_mask = 1LLU << pkt_num;
 
-	uint8_t protocol = RTE_MBUF_METADATA_UINT8(pkt, PROT_OFST_IP4);
+	uint8_t protocol = RTE_MBUF_METADATA_UINT8(pkt, FUN_PROT_OFST_IP4(pkt));
 
 	uint32_t *dst_addr = RTE_MBUF_METADATA_UINT32_PTR(pkt,
-				DST_ADR_OFST_IP4);
+				FUN_DST_ADR_OFST_IP4(pkt));
 	uint16_t dst_port = RTE_MBUF_METADATA_UINT16(pkt,
-				DST_PRT_OFST_IP4_TCP);
+				FUN_DST_PRT_OFST_IP4_TCP(pkt));
 
 	struct pipeline_cgnapt_entry_key key;
 
@@ -5342,31 +5343,31 @@ pkt4_work_cgnapt_key_ipv6_prv(
 	uint64_t pkt_mask3 = 1LLU << (pkt_num + 3);
 
 	uint8_t protocol0 = RTE_MBUF_METADATA_UINT8(pkt[0],
-				PROT_OFST_IP6);
+				FUN_PROT_OFST_IP6(pkt[0]));
 	uint8_t protocol1 = RTE_MBUF_METADATA_UINT8(pkt[1],
-				PROT_OFST_IP6);
+				FUN_PROT_OFST_IP6(pkt[1]));
 	uint8_t protocol2 = RTE_MBUF_METADATA_UINT8(pkt[2],
-				PROT_OFST_IP6);
+				FUN_PROT_OFST_IP6(pkt[2]));
 	uint8_t protocol3 = RTE_MBUF_METADATA_UINT8(pkt[3],
-				PROT_OFST_IP6);
+				FUN_PROT_OFST_IP6(pkt[3]));
 
 	uint32_t *src_addr0 = RTE_MBUF_METADATA_UINT32_PTR(pkt[0],
-				SRC_ADR_OFST_IP6);
+				FUN_SRC_ADR_OFST_IP6(pkt[0]));
 	uint32_t *src_addr1 = RTE_MBUF_METADATA_UINT32_PTR(pkt[1],
-				SRC_ADR_OFST_IP6);
+				FUN_SRC_ADR_OFST_IP6(pkt[1]));
 	uint32_t *src_addr2 = RTE_MBUF_METADATA_UINT32_PTR(pkt[2],
-				SRC_ADR_OFST_IP6);
+				FUN_SRC_ADR_OFST_IP6(pkt[2]));
 	uint32_t *src_addr3 = RTE_MBUF_METADATA_UINT32_PTR(pkt[3],
-				SRC_ADR_OFST_IP6);
+				FUN_SRC_ADR_OFST_IP6(pkt[3]));
 
 	uint16_t src_port0 = RTE_MBUF_METADATA_UINT16(pkt[0],
-				SRC_PRT_OFST_IP6);
+				FUN_SRC_PRT_OFST_IP6(pkt[0]));
 	uint16_t src_port1 = RTE_MBUF_METADATA_UINT16(pkt[1],
-				SRC_PRT_OFST_IP6);
+				FUN_SRC_PRT_OFST_IP6(pkt[1]));
 	uint16_t src_port2 = RTE_MBUF_METADATA_UINT16(pkt[2],
-				SRC_PRT_OFST_IP6);
+				FUN_SRC_PRT_OFST_IP6(pkt[2]));
 	uint16_t src_port3 = RTE_MBUF_METADATA_UINT16(pkt[3],
-				SRC_PRT_OFST_IP6);
+				FUN_SRC_PRT_OFST_IP6(pkt[3]));
 
 	uint16_t phy_port0 = pkt[0]->port;
 	uint16_t phy_port1 = pkt[1]->port;
@@ -5663,31 +5664,31 @@ pkt4_work_cgnapt_key_ipv6_pub(
 	uint64_t pkt_mask3 = 1LLU << (pkt_num + 3);
 
 	uint8_t protocol0 = RTE_MBUF_METADATA_UINT8(pkt[0],
-				PROT_OFST_IP4);
+				FUN_PROT_OFST_IP4(pkt[0]));
 	uint8_t protocol1 = RTE_MBUF_METADATA_UINT8(pkt[1],
-				PROT_OFST_IP4);
+				FUN_PROT_OFST_IP4(pkt[1]));
 	uint8_t protocol2 = RTE_MBUF_METADATA_UINT8(pkt[2],
-				PROT_OFST_IP4);
+				FUN_PROT_OFST_IP4(pkt[2]));
 	uint8_t protocol3 = RTE_MBUF_METADATA_UINT8(pkt[3],
-				PROT_OFST_IP4);
+				FUN_PROT_OFST_IP4(pkt[3]));
 
 	uint32_t *dst_addr0 = RTE_MBUF_METADATA_UINT32_PTR(pkt[0],
-				DST_ADR_OFST_IP4);
+				FUN_DST_ADR_OFST_IP4(pkt[0]));
 	uint32_t *dst_addr1 = RTE_MBUF_METADATA_UINT32_PTR(pkt[1],
-				DST_ADR_OFST_IP4);
+				FUN_DST_ADR_OFST_IP4(pkt[1]));
 	uint32_t *dst_addr2 = RTE_MBUF_METADATA_UINT32_PTR(pkt[2],
-				DST_ADR_OFST_IP4);
+				FUN_DST_ADR_OFST_IP4(pkt[2]));
 	uint32_t *dst_addr3 = RTE_MBUF_METADATA_UINT32_PTR(pkt[3],
-				DST_ADR_OFST_IP4);
+				FUN_DST_ADR_OFST_IP4(pkt[3]));
 
 	uint16_t dst_port0 = RTE_MBUF_METADATA_UINT16(pkt[0],
-				DST_PRT_OFST_IP4_TCP);
+				FUN_DST_PRT_OFST_IP4_TCP(pkt[0]));
 	uint16_t dst_port1 = RTE_MBUF_METADATA_UINT16(pkt[1],
-				DST_PRT_OFST_IP4_TCP);
+				FUN_DST_PRT_OFST_IP4_TCP(pkt[1]));
 	uint16_t dst_port2 = RTE_MBUF_METADATA_UINT16(pkt[2],
-				DST_PRT_OFST_IP4_TCP);
+				FUN_DST_PRT_OFST_IP4_TCP(pkt[2]));
 	uint16_t dst_port3 = RTE_MBUF_METADATA_UINT16(pkt[3],
-				DST_PRT_OFST_IP4_TCP);
+				FUN_DST_PRT_OFST_IP4_TCP(pkt[3]));
 
 	struct pipeline_cgnapt_entry_key key0;
 	struct pipeline_cgnapt_entry_key key1;
@@ -5910,7 +5911,7 @@ pkt_work_cgnapt_ipv6_prv(
 	/*bitmask representing only this packet */
 	uint64_t pkt_mask = 1LLU << pkt_num;
 
-	uint8_t protocol = RTE_MBUF_METADATA_UINT8(pkt, PROT_OFST_IP6);
+	uint8_t protocol = RTE_MBUF_METADATA_UINT8(pkt, FUN_PROT_OFST_IP6(pkt));
 
 	/* Added for Multiport */
 	uint32_t dest_if = INVALID_DESTIF;
@@ -6022,18 +6023,18 @@ pkt_work_cgnapt_ipv6_prv(
 	*/
 
 	uint32_t *src_addr =
-		RTE_MBUF_METADATA_UINT32_PTR(pkt, SRC_ADR_OFST_IP6t4);
+		RTE_MBUF_METADATA_UINT32_PTR(pkt, FUN_SRC_ADR_OFST_IP6t4(pkt));
 	uint32_t *dst_addr =
-		RTE_MBUF_METADATA_UINT32_PTR(pkt, DST_ADR_OFST_IP6t4);
+		RTE_MBUF_METADATA_UINT32_PTR(pkt, FUN_DST_ADR_OFST_IP6t4(pkt));
 	uint16_t *src_port =
-		RTE_MBUF_METADATA_UINT16_PTR(pkt, SRC_PRT_OFST_IP6t4);
+		RTE_MBUF_METADATA_UINT16_PTR(pkt, FUN_SRC_PRT_OFST_IP6t4(pkt));
 	uint16_t *dst_port =
-		RTE_MBUF_METADATA_UINT16_PTR(pkt, DST_PRT_OFST_IP6t4);
+		RTE_MBUF_METADATA_UINT16_PTR(pkt, FUN_DST_PRT_OFST_IP6t4(pkt));
 
 	uint8_t *eth_dest = RTE_MBUF_METADATA_UINT8_PTR(pkt,
-				ETH_OFST_IP6t4);
+				FUN_ETH_OFST_IP6t4(pkt));
 	uint8_t *eth_src = RTE_MBUF_METADATA_UINT8_PTR(pkt,
-				ETH_OFST_IP6t4 + 6);
+				FUN_ETH_OFST_IP6t4(pkt) + 6);
 
 	if (entry->data.ttl == NAPT_ENTRY_STALE)
 		entry->data.ttl = NAPT_ENTRY_VALID;
@@ -6190,7 +6191,7 @@ pkt_work_cgnapt_ipv6_pub(
 	/*bitmask representing only this packet */
 	uint64_t pkt_mask = 1LLU << pkt_num;
 
-	uint8_t protocol = RTE_MBUF_METADATA_UINT8(pkt, PROT_OFST_IP4);
+	uint8_t protocol = RTE_MBUF_METADATA_UINT8(pkt, FUN_PROT_OFST_IP4(pkt));
 
 	uint32_t dest_if = INVALID_DESTIF;	/* Added for Multiport */
 	uint16_t *outport_id =
@@ -6232,10 +6233,10 @@ pkt_work_cgnapt_ipv6_pub(
 
 	struct ipv4_hdr ipv4_hdr;
 	uint16_t *src_port =
-		RTE_MBUF_METADATA_UINT16_PTR(pkt, SRC_PRT_OFST_IP4_TCP);
+		RTE_MBUF_METADATA_UINT16_PTR(pkt, FUN_SRC_PRT_OFST_IP4_TCP(pkt));
 
-	uint8_t *eth_dest = RTE_MBUF_METADATA_UINT8_PTR(pkt, MBUF_HDR_ROOM);
-	uint8_t *eth_src = RTE_MBUF_METADATA_UINT8_PTR(pkt, MBUF_HDR_ROOM + 6);
+	uint8_t *eth_dest = RTE_MBUF_METADATA_UINT8_PTR(pkt, FUN_MBUF_HDR_ROOM(pkt));
+	uint8_t *eth_src = RTE_MBUF_METADATA_UINT8_PTR(pkt, FUN_MBUF_HDR_ROOM(pkt) + 6);
 
 	if (entry->data.ttl == NAPT_ENTRY_STALE)
 		entry->data.ttl = NAPT_ENTRY_VALID;
@@ -6337,9 +6338,9 @@ pkt_work_cgnapt_ipv6_pub(
 			return;
 		}
 		uint32_t *dst_addr =
-			RTE_MBUF_METADATA_UINT32_PTR(pkt, DST_ADR_OFST_IP4t6);
+			RTE_MBUF_METADATA_UINT32_PTR(pkt, FUN_DST_ADR_OFST_IP4t6(pkt));
 		uint16_t *dst_port =
-			RTE_MBUF_METADATA_UINT16_PTR(pkt, DST_PRT_OFST_IP4t6);
+			RTE_MBUF_METADATA_UINT16_PTR(pkt, FUN_DST_PRT_OFST_IP4t6(pkt));
 
 		memcpy((uint8_t *) &dst_addr[0], &entry->data.u.prv_ipv6[0],
 				 16);
@@ -6402,7 +6403,7 @@ pkt4_work_cgnapt_ipv6_prv(
 		/*bitmask representing only this packet */
 		uint64_t pkt_mask = 1LLU << pkt_num;
 
-		uint8_t protocol = RTE_MBUF_METADATA_UINT8(pkt, PROT_OFST_IP6);
+		uint8_t protocol = RTE_MBUF_METADATA_UINT8(pkt, FUN_PROT_OFST_IP6(pkt));
 		uint32_t dest_if = INVALID_DESTIF;
 		uint16_t *outport_id =
 			RTE_MBUF_METADATA_UINT16_PTR(pkt, cgnapt_meta_offset);
@@ -6511,18 +6512,18 @@ pkt4_work_cgnapt_ipv6_prv(
 		*/
 
 		uint32_t *src_addr =
-			RTE_MBUF_METADATA_UINT32_PTR(pkt, SRC_ADR_OFST_IP6t4);
+			RTE_MBUF_METADATA_UINT32_PTR(pkt, FUN_SRC_ADR_OFST_IP6t4(pkt));
 		uint32_t *dst_addr =
-			RTE_MBUF_METADATA_UINT32_PTR(pkt, DST_ADR_OFST_IP6t4);
+			RTE_MBUF_METADATA_UINT32_PTR(pkt, FUN_DST_ADR_OFST_IP6t4(pkt));
 		uint16_t *src_port =
-			RTE_MBUF_METADATA_UINT16_PTR(pkt, SRC_PRT_OFST_IP6t4);
+			RTE_MBUF_METADATA_UINT16_PTR(pkt, FUN_SRC_PRT_OFST_IP6t4(pkt));
 		uint16_t *dst_port =
-			RTE_MBUF_METADATA_UINT16_PTR(pkt, DST_PRT_OFST_IP6t4);
+			RTE_MBUF_METADATA_UINT16_PTR(pkt, FUN_DST_PRT_OFST_IP6t4(pkt));
 
 		uint8_t *eth_dest =
-			RTE_MBUF_METADATA_UINT8_PTR(pkt, ETH_OFST_IP6t4);
+			RTE_MBUF_METADATA_UINT8_PTR(pkt, FUN_ETH_OFST_IP6t4(pkt));
 		uint8_t *eth_src =
-			RTE_MBUF_METADATA_UINT8_PTR(pkt, ETH_OFST_IP6t4 + 6);
+			RTE_MBUF_METADATA_UINT8_PTR(pkt, FUN_ETH_OFST_IP6t4(pkt) + 6);
 
 		if (entry->data.ttl == NAPT_ENTRY_STALE)
 			entry->data.ttl = NAPT_ENTRY_VALID;
@@ -6690,7 +6691,7 @@ pkt4_work_cgnapt_ipv6_pub(
 		/*bitmask representing only this packet */
 		uint64_t pkt_mask = 1LLU << pkt_num;
 
-		uint8_t protocol = RTE_MBUF_METADATA_UINT8(pkt, PROT_OFST_IP4);
+		uint8_t protocol = RTE_MBUF_METADATA_UINT8(pkt, FUN_PROT_OFST_IP4(pkt));
 		uint16_t *outport_id =
 			RTE_MBUF_METADATA_UINT16_PTR(pkt, cgnapt_meta_offset);
 		struct cgnapt_table_entry *entry = NULL;
@@ -6728,12 +6729,12 @@ pkt4_work_cgnapt_ipv6_pub(
 		struct ipv4_hdr ipv4_hdr;
 
 		uint16_t *src_port =
-			RTE_MBUF_METADATA_UINT16_PTR(pkt, SRC_PRT_OFST_IP4_TCP);
+			RTE_MBUF_METADATA_UINT16_PTR(pkt, FUN_SRC_PRT_OFST_IP4_TCP(pkt));
 
 		uint8_t *eth_dest =
-			RTE_MBUF_METADATA_UINT8_PTR(pkt, MBUF_HDR_ROOM);
+			RTE_MBUF_METADATA_UINT8_PTR(pkt, FUN_MBUF_HDR_ROOM(pkt));
 		uint8_t *eth_src =
-			RTE_MBUF_METADATA_UINT8_PTR(pkt, MBUF_HDR_ROOM + 6);
+			RTE_MBUF_METADATA_UINT8_PTR(pkt, FUN_MBUF_HDR_ROOM(pkt) + 6);
 
 		if (entry->data.ttl == NAPT_ENTRY_STALE)
 			entry->data.ttl = NAPT_ENTRY_VALID;
@@ -6846,9 +6847,9 @@ pkt4_work_cgnapt_ipv6_pub(
 				continue;
 			}
 			uint32_t *dst_addr = RTE_MBUF_METADATA_UINT32_PTR(pkt,
-							DST_ADR_OFST_IP4t6);
+							FUN_DST_ADR_OFST_IP4t6(pkt));
 			uint16_t *dst_port = RTE_MBUF_METADATA_UINT16_PTR(pkt,
-							DST_PRT_OFST_IP4t6);
+							FUN_DST_PRT_OFST_IP4t6(pkt));
 
 			memcpy((uint8_t *) &dst_addr[0],
 					 &entry->data.u.prv_ipv6[0], 16);
@@ -7158,7 +7159,7 @@ void send_icmp_dest_unreachable_msg(void)
 
 	uint32_t *src_addr;
 	uint32_t src_addr_offset =
-		MBUF_HDR_ROOM + ETH_HDR_SIZE + IP_HDR_SRC_ADR_OFST;
+		cgnapt_icmp_pkt->data_off + ETH_HDR_SIZE + IP_HDR_SRC_ADR_OFST;
 	src_addr =
 		RTE_MBUF_METADATA_UINT32_PTR(cgnapt_icmp_pkt, src_addr_offset);
 
@@ -7533,9 +7534,9 @@ pkt_miss_cgnapt(struct pipeline_cgnapt_entry_key *key,
 
 	struct pipeline_cgnapt *p_nat = (struct pipeline_cgnapt *)arg;
 
-	uint32_t eth_proto_offset = MBUF_HDR_ROOM + 12;
+	uint32_t eth_proto_offset = FUN_MBUF_HDR_ROOM(pkt) + 12;
 	uint32_t src_addr_offset_ipv6 =
-		MBUF_HDR_ROOM + ETH_HDR_SIZE + IPV6_HDR_SRC_ADR_OFST;
+		FUN_MBUF_HDR_ROOM(pkt) + ETH_HDR_SIZE + IPV6_HDR_SRC_ADR_OFST;
 	uint16_t phy_port = pkt->port;
 
 	uint16_t *eth_proto =
diff --git a/VNFs/vCGNAPT/pipeline/pipeline_cgnapt_be.h b/VNFs/vCGNAPT/pipeline/pipeline_cgnapt_be.h
index 7fde0c5..1022698 100644
--- a/VNFs/vCGNAPT/pipeline/pipeline_cgnapt_be.h
+++ b/VNFs/vCGNAPT/pipeline/pipeline_cgnapt_be.h
@@ -287,42 +287,42 @@ f_ah(									\
 }
 
 /* IPv4 offsets */
-#define SRC_ADR_OFST_IP4 (MBUF_HDR_ROOM + ETH_HDR_SIZE + IP_HDR_SRC_ADR_OFST)
-#define DST_ADR_OFST_IP4 (MBUF_HDR_ROOM + ETH_HDR_SIZE + IP_HDR_DST_ADR_OFST)
-#define SRC_PRT_OFST_IP4_TCP (MBUF_HDR_ROOM + ETH_HDR_SIZE + IP_HDR_SIZE)
-#define SRC_PRT_OFST_IP4_UDP SRC_PRT_OFST_IP4_TCP
-#define DST_PRT_OFST_IP4_TCP (MBUF_HDR_ROOM + ETH_HDR_SIZE + IP_HDR_SIZE + 2)
-#define DST_PRT_OFST_IP4_UDP DST_PRT_OFST_IP4_TCP
-#define PROT_OFST_IP4 (MBUF_HDR_ROOM + ETH_HDR_SIZE + IP_HDR_PROTOCOL_OFST)
-#define IDEN_OFST_IP4_ICMP (MBUF_HDR_ROOM + ETH_HDR_SIZE + IP_HDR_SIZE + 4)
-#define SEQN_OFST_IP4_ICMP (MBUF_HDR_ROOM + ETH_HDR_SIZE + IP_HDR_SIZE + 6)
+#define FUN_SRC_ADR_OFST_IP4(skb) (FUN_MBUF_HDR_ROOM(skb) + ETH_HDR_SIZE + IP_HDR_SRC_ADR_OFST)
+#define FUN_DST_ADR_OFST_IP4(skb) (FUN_MBUF_HDR_ROOM(skb) + ETH_HDR_SIZE + IP_HDR_DST_ADR_OFST)
+#define FUN_SRC_PRT_OFST_IP4_TCP(skb) (FUN_MBUF_HDR_ROOM(skb) + ETH_HDR_SIZE + IP_HDR_SIZE)
+#define FUN_SRC_PRT_OFST_IP4_UDP(skb) FUN_SRC_PRT_OFST_IP4_TCP(skb)
+#define FUN_DST_PRT_OFST_IP4_TCP(skb) (FUN_MBUF_HDR_ROOM(skb) + ETH_HDR_SIZE + IP_HDR_SIZE + 2)
+#define FUN_DST_PRT_OFST_IP4_UDP(skb) FUN_DST_PRT_OFST_IP4_TCP(skb)
+#define FUN_PROT_OFST_IP4(skb) (FUN_MBUF_HDR_ROOM(skb)+ ETH_HDR_SIZE + IP_HDR_PROTOCOL_OFST)
+#define FUN_IDEN_OFST_IP4_ICMP(skb) (FUN_MBUF_HDR_ROOM(skb) + ETH_HDR_SIZE + IP_HDR_SIZE + 4)
+#define FUN_SEQN_OFST_IP4_ICMP(skb) (FUN_MBUF_HDR_ROOM(skb)+ ETH_HDR_SIZE + IP_HDR_SIZE + 6)
 
 /*NAT64*/
 
 /* IPv6 offsets */
-#define SRC_ADR_OFST_IP6 (MBUF_HDR_ROOM + ETH_HDR_SIZE + IPV6_HDR_SRC_ADR_OFST)
-#define DST_ADR_OFST_IP6 (MBUF_HDR_ROOM + ETH_HDR_SIZE + IPV6_HDR_DST_ADR_OFST)
-#define SRC_PRT_OFST_IP6 (MBUF_HDR_ROOM + ETH_HDR_SIZE + IPV6_HDR_SIZE)
-#define DST_PRT_OFST_IP6 (MBUF_HDR_ROOM + ETH_HDR_SIZE + IPV6_HDR_SIZE + 2)
-#define PROT_OFST_IP6 (MBUF_HDR_ROOM + ETH_HDR_SIZE + IPV6_HDR_PROTOCOL_OFST)
+#define FUN_SRC_ADR_OFST_IP6(skb) (FUN_MBUF_HDR_ROOM(skb) + ETH_HDR_SIZE + IPV6_HDR_SRC_ADR_OFST)
+#define FUN_DST_ADR_OFST_IP6(skb) (FUN_MBUF_HDR_ROOM(skb)+ ETH_HDR_SIZE + IPV6_HDR_DST_ADR_OFST)
+#define FUN_SRC_PRT_OFST_IP6(skb) (FUN_MBUF_HDR_ROOM(skb)+ ETH_HDR_SIZE + IPV6_HDR_SIZE)
+#define FUN_DST_PRT_OFST_IP6(skb) (FUN_MBUF_HDR_ROOM(skb)+ ETH_HDR_SIZE + IPV6_HDR_SIZE + 2)
+#define FUN_PROT_OFST_IP6(skb) (FUN_MBUF_HDR_ROOM(skb)+ ETH_HDR_SIZE + IPV6_HDR_PROTOCOL_OFST)
 
 /* After IPv6 to IPv4 conversion */
-#define SRC_ADR_OFST_IP6t4 (20 + MBUF_HDR_ROOM + ETH_HDR_SIZE + \
+#define FUN_SRC_ADR_OFST_IP6t4(pkt) (20 + FUN_MBUF_HDR_ROOM(pkt) + ETH_HDR_SIZE + \
 					IP_HDR_SRC_ADR_OFST)
-#define DST_ADR_OFST_IP6t4 (20 + MBUF_HDR_ROOM + ETH_HDR_SIZE + \
+#define FUN_DST_ADR_OFST_IP6t4(pkt) (20 + FUN_MBUF_HDR_ROOM(pkt) + ETH_HDR_SIZE + \
 					IP_HDR_DST_ADR_OFST)
-#define SRC_PRT_OFST_IP6t4 (20 + MBUF_HDR_ROOM + ETH_HDR_SIZE + \
+#define FUN_SRC_PRT_OFST_IP6t4(pkt) (20 + FUN_MBUF_HDR_ROOM(pkt) + ETH_HDR_SIZE + \
 					IP_HDR_SIZE)
-#define DST_PRT_OFST_IP6t4 (20 + MBUF_HDR_ROOM + ETH_HDR_SIZE + \
+#define FUN_DST_PRT_OFST_IP6t4(pkt) (20 + FUN_MBUF_HDR_ROOM(pkt) + ETH_HDR_SIZE + \
 					IP_HDR_SIZE + 2)
-#define PROT_OFST_IP6t4 (20 + MBUF_HDR_ROOM + ETH_HDR_SIZE + \
+#define FUN_PROT_OFST_IP6t4(pkt) (20 + FUN_MBUF_HDR_ROOM(pkt) + ETH_HDR_SIZE + \
 					IP_HDR_PROTOCOL_OFST)
-#define ETH_OFST_IP6t4 (20 + MBUF_HDR_ROOM)
+#define FUN_ETH_OFST_IP6t4(pkt) (20 + FUN_MBUF_HDR_ROOM(pkt))
 
 /* After IPv4 to IPv6 conversion */
-#define DST_PRT_OFST_IP4t6 (MBUF_HDR_ROOM + ETH_HDR_SIZE + \
+#define FUN_DST_PRT_OFST_IP4t6(pkt) (FUN_MBUF_HDR_ROOM(pkt) + ETH_HDR_SIZE + \
 				IPV6_HDR_SIZE + 2 - 20)
-#define DST_ADR_OFST_IP4t6 (MBUF_HDR_ROOM + ETH_HDR_SIZE + \
+#define FUN_DST_ADR_OFST_IP4t6(pkt) (FUN_MBUF_HDR_ROOM(pkt) + ETH_HDR_SIZE + \
 				IPV6_HDR_DST_ADR_OFST - 20)
 
 #define TRAFFIC_TYPE_IPV4  4
diff --git a/common/VIL/l2l3_stack/l3fwd_lpm4.c b/common/VIL/l2l3_stack/l3fwd_lpm4.c
index 8b3aab1..c3d2004 100644
--- a/common/VIL/l2l3_stack/l3fwd_lpm4.c
+++ b/common/VIL/l2l3_stack/l3fwd_lpm4.c
@@ -310,7 +310,7 @@ lpm4_table_lookup(struct rte_mbuf **pkts_burst, uint16_t nb_pkts,
 				 nb_pkts, rcvd_count, (void *)pkts_mask);
 	}
 	uint32_t dst_addr_offset =
-			MBUF_HDR_ROOM + ETH_HDR_SIZE + IP_HDR_DST_ADR_OFST;
+			ETH_HDR_SIZE + IP_HDR_DST_ADR_OFST;
 
 	for (; pkts_key_mask;) {
 /**< Populate key offset in META DATA for all valid pkts */
@@ -323,7 +323,7 @@ lpm4_table_lookup(struct rte_mbuf **pkts_burst, uint16_t nb_pkts,
 		lpm_key = (uint32_t *) RTE_MBUF_METADATA_UINT8_PTR(mbuf, 128);
 		dst_addr =
 				(uint32_t *) RTE_MBUF_METADATA_UINT8_PTR(mbuf,
-									 dst_addr_offset);
+									 mbuf->data_off+ dst_addr_offset);
 		*lpm_key = *dst_addr;
 		if (L3FWD_DEBUG) {
 
@@ -430,9 +430,9 @@ lpm4_table_lookup(struct rte_mbuf **pkts_burst, uint16_t nb_pkts,
 
 		/* extract ip headers and MAC */
 		uint8_t *eth_dest =
-				RTE_MBUF_METADATA_UINT8_PTR(pkt, MBUF_HDR_ROOM);
+				RTE_MBUF_METADATA_UINT8_PTR(pkt, FUN_MBUF_HDR_ROOM(pkt));
 		uint8_t *eth_src =
-				RTE_MBUF_METADATA_UINT8_PTR(pkt, MBUF_HDR_ROOM + 6);
+				RTE_MBUF_METADATA_UINT8_PTR(pkt, FUN_MBUF_HDR_ROOM(pkt) + 6);
 		if (L3FWD_DEBUG) {
 			printf
 					("MAC BEFORE- DST MAC %02x:%02x:%02x:%02x:%02x:%02x, \
@@ -1074,9 +1074,9 @@ resolve_l2_adj(uint32_t nexthop_ip, uint8_t out_port_id,
 uint8_t ip_hash_load_balance(struct rte_mbuf *mbuf)
 {
 	uint32_t src_addr_offset =
-			MBUF_HDR_ROOM + ETH_HDR_SIZE + IP_HDR_SRC_ADR_OFST;
+			mbuf->data_off + ETH_HDR_SIZE + IP_HDR_SRC_ADR_OFST;
 	uint32_t dst_addr_offset =
-			MBUF_HDR_ROOM + ETH_HDR_SIZE + IP_HDR_DST_ADR_OFST;
+			mbuf->data_off + ETH_HDR_SIZE + IP_HDR_DST_ADR_OFST;
 	uint32_t *dst_addr = NULL;
 	uint32_t *src_addr = NULL;
 	src_addr =
diff --git a/common/VIL/l2l3_stack/l3fwd_lpm4.h b/common/VIL/l2l3_stack/l3fwd_lpm4.h
index 69e6236..70d7d50 100644
--- a/common/VIL/l2l3_stack/l3fwd_lpm4.h
+++ b/common/VIL/l2l3_stack/l3fwd_lpm4.h
@@ -49,12 +49,13 @@
 #include "l3fwd_common.h"
 #include "l3fwd_lpm6.h"
 #include "interface.h"
+#include "mbuf_hdr_room.h"
 
 /**
 * Define all RTE MBUF offset size
 */
 
-#define MBUF_HDR_ROOM 256 /**< MBUF HEADER ROOM OFFSET */
+#define FUN_MBUF_HDR_ROOM(pkt) DPDK_17_05_MBUF_HDR_ROOM(pkt) /**< MBUF HEADER ROOM OFFSET */
 
 /* IPv4 */
 #define ETH_HDR_SIZE  14 /**< ETHER HEADER OFFSET */
diff --git a/common/VIL/l2l3_stack/l3fwd_lpm6.c b/common/VIL/l2l3_stack/l3fwd_lpm6.c
index 7d3cf4f..ed2edb9 100644
--- a/common/VIL/l2l3_stack/l3fwd_lpm6.c
+++ b/common/VIL/l2l3_stack/l3fwd_lpm6.c
@@ -248,7 +248,7 @@ lpm6_table_lookup(struct rte_mbuf **pkts_burst,
 	uint64_t lookup_miss_mask = pkts_mask;
 	/*Populate the key offset in META DATA */
 	uint32_t dst_addr_offset =
-			MBUF_HDR_ROOM + ETH_HDR_SIZE + IP_HDR_DST_ADR_OFST_IPV6;
+			ETH_HDR_SIZE + IP_HDR_DST_ADR_OFST_IPV6;
 	uint64_t pkts_key_mask = pkts_mask;
 
 	//for(i = 0; i < RTE_PORT_IN_BURST_SIZE_MAX; i++)
@@ -262,7 +262,7 @@ lpm6_table_lookup(struct rte_mbuf **pkts_burst,
 		uint8_t dst_addr[RTE_LPM_IPV6_ADDR_SIZE];
 		memcpy(dst_addr,
 					 (uint8_t *) RTE_MBUF_METADATA_UINT32_PTR(pkts_burst[pos],
-								dst_addr_offset),
+								pkts_burst[pos]->data_off+dst_addr_offset),
 					 RTE_LPM_IPV6_ADDR_SIZE);
 		lpm6_key =
 				(uint8_t *) RTE_MBUF_METADATA_UINT8_PTR(pkts_burst[pos],
@@ -349,9 +349,9 @@ lpm6_table_lookup(struct rte_mbuf **pkts_burst,
 		}
 
 		uint8_t *eth_dest =
-				RTE_MBUF_METADATA_UINT8_PTR(pkt, MBUF_HDR_ROOM);
+				RTE_MBUF_METADATA_UINT8_PTR(pkt, FUN_MBUF_HDR_ROOM(pkt));
 		uint8_t *eth_src =
-				RTE_MBUF_METADATA_UINT8_PTR(pkt, MBUF_HDR_ROOM + 6);
+				RTE_MBUF_METADATA_UINT8_PTR(pkt, FUN_MBUF_HDR_ROOM(pkt) + 6);
 		if (L3FWD_DEBUG) {
 			printf
 				("MAC BEFORE- DST MAC %02x:%02x:%02x:%02x"
@@ -890,9 +890,9 @@ ipv6_forward_deliver(struct rte_mbuf **pkt_burst, uint16_t nb_pkts,
 uint8_t ipv6_hash_load_balance(struct rte_mbuf *mbuf)
 {
 	uint32_t src_addr_offset =
-			MBUF_HDR_ROOM + ETH_HDR_SIZE + IP_HDR_SRC_ADR_OFST_IPV6;
+			mbuf->data_off + ETH_HDR_SIZE + IP_HDR_SRC_ADR_OFST_IPV6;
 	uint32_t dst_addr_offset =
-			MBUF_HDR_ROOM + ETH_HDR_SIZE + IP_HDR_DST_ADR_OFST_IPV6;
+			mbuf->data_off + ETH_HDR_SIZE + IP_HDR_DST_ADR_OFST_IPV6;
 	uint8_t src_addr[RTE_LPM_IPV6_ADDR_SIZE];
 	uint8_t dst_addr[RTE_LPM_IPV6_ADDR_SIZE];
 
diff --git a/common/VIL/l2l3_stack/l3fwd_lpm6.h b/common/VIL/l2l3_stack/l3fwd_lpm6.h
index fdd8287..a7b8dfe 100644
--- a/common/VIL/l2l3_stack/l3fwd_lpm6.h
+++ b/common/VIL/l2l3_stack/l3fwd_lpm6.h
@@ -50,12 +50,12 @@
 #include "l3fwd_common.h"
 #include "l3fwd_lpm4.h"
 #include "interface.h"
-
+#include "mbuf_hdr_room.h"
 /**
 * Define all RTE MBUF offset size
 */
 
-#define MBUF_HDR_ROOM 256			/**< MBUF HEADER ROOM OFFSET */
+#define FUN_MBUF_HDR_ROOM(pkt) DPDK_17_05_MBUF_HDR_ROOM(pkt)			/**< MBUF HEADER ROOM OFFSET */
 /* IPv6 */
 #define IP_HDR_SIZE_IPV6  40			/**< IPv6 HEADER OFFSET */
 #define IP_HDR_SRC_ADR_OFST_IPV6 8  /**< IPv6 HEADER SRC IP ADDRESS OFFSET */
diff --git a/common/VIL/l2l3_stack/lib_arp.c b/common/VIL/l2l3_stack/lib_arp.c
index d59f4b7..4ba90fd 100644
--- a/common/VIL/l2l3_stack/lib_arp.c
+++ b/common/VIL/l2l3_stack/lib_arp.c
@@ -1087,8 +1087,8 @@ arp_send_buffered_pkts(struct arp_entry_data *ret_arp_data,
 	for (i=0;i<(int)ret_arp_data->num_pkts;i++) {
 		pkt = ret_arp_data->buf_pkts[i];
 
-		eth_dest = RTE_MBUF_METADATA_UINT8_PTR(pkt, MBUF_HDR_ROOM);
-		eth_src = RTE_MBUF_METADATA_UINT8_PTR(pkt, MBUF_HDR_ROOM + 6);
+		eth_dest = RTE_MBUF_METADATA_UINT8_PTR(pkt, FUN_MBUF_HDR_ROOM(pkt));
+		eth_src = RTE_MBUF_METADATA_UINT8_PTR(pkt, FUN_MBUF_HDR_ROOM(pkt) + 6);
 
 		memcpy(eth_dest, hw_addr, sizeof(struct ether_addr));
 		memcpy(eth_src, get_link_hw_addr(port_id),
@@ -1131,8 +1131,8 @@ nd_send_buffered_pkts(struct nd_entry_data *ret_nd_data,
 	rte_rwlock_write_lock(&ret_nd_data->queue_lock);
 	for (i=0;i<(int)ret_nd_data->num_pkts;i++) {
 		pkt = ret_nd_data->buf_pkts[i];
-		eth_dest = RTE_MBUF_METADATA_UINT8_PTR(pkt, MBUF_HDR_ROOM);
-		eth_src = RTE_MBUF_METADATA_UINT8_PTR(pkt, MBUF_HDR_ROOM + 6);
+		eth_dest = RTE_MBUF_METADATA_UINT8_PTR(pkt, FUN_MBUF_HDR_ROOM(pkt));
+		eth_src = RTE_MBUF_METADATA_UINT8_PTR(pkt, FUN_MBUF_HDR_ROOM(pkt) + 6);
 
 		memcpy(eth_dest, hw_addr, sizeof(struct ether_addr));
 		memcpy(eth_src, get_link_hw_addr(port_id),
diff --git a/common/VIL/pipeline_arpicmp/pipeline_arpicmp_be.c b/common/VIL/pipeline_arpicmp/pipeline_arpicmp_be.c
index 6176813..4e0c8fd 100644
--- a/common/VIL/pipeline_arpicmp/pipeline_arpicmp_be.c
+++ b/common/VIL/pipeline_arpicmp/pipeline_arpicmp_be.c
@@ -522,10 +522,10 @@ pkt_key_arpicmp(struct rte_mbuf *pkt, uint32_t pkt_num, void *arg)
 	uint8_t in_port_id = pkt->port;
 	uint8_t *protocol;
 	uint32_t pkt_mask = 1 << pkt_num;
-	uint32_t eth_proto_offset = MBUF_HDR_ROOM + 12;
+	uint32_t eth_proto_offset = FUN_MBUF_HDR_ROOM(pkt) + 12;
 
 	uint32_t prot_offset =
-			MBUF_HDR_ROOM + ETH_HDR_SIZE + IP_HDR_PROTOCOL_OFST;
+			FUN_MBUF_HDR_ROOM(pkt) + ETH_HDR_SIZE + IP_HDR_PROTOCOL_OFST;
 
 	uint16_t *eth_proto =
 		RTE_MBUF_METADATA_UINT16_PTR(pkt, eth_proto_offset);
@@ -582,11 +582,12 @@ pkt4_key_arpicmp(struct rte_mbuf **pkt, uint32_t pkt_num, void *arg)
 	struct pipeline_arpicmp *p_arp = (struct pipeline_arpicmp *)ap->p;
 	p_arp->receivedPktCount += 4;
 
-	uint32_t eth_proto_offset = MBUF_HDR_ROOM + 12;
 	uint8_t in_port_id = pkt[0]->port;
 
-	uint32_t prot_offset =
-			MBUF_HDR_ROOM + ETH_HDR_SIZE + IP_HDR_PROTOCOL_OFST;
+        //XXX change me
+	//uint32_t eth_proto_offset = FUN_MBUF_HDR_ROOM(pkt[0]) + 12;
+	//uint32_t prot_offset =
+        //			FUN_MBUF_HDR_ROOM(pkt[0]) + ETH_HDR_SIZE + IP_HDR_PROTOCOL_OFST;
 
 	/* header room + eth hdr size + src_aadr offset in ip header */
 	uint32_t pkt_mask0 = 1 << pkt_num;
@@ -595,13 +596,13 @@ pkt4_key_arpicmp(struct rte_mbuf **pkt, uint32_t pkt_num, void *arg)
 	uint32_t pkt_mask3 = 1 << (pkt_num + 3);
 
 	uint16_t *eth_proto0 =
-		RTE_MBUF_METADATA_UINT16_PTR(pkt[0], eth_proto_offset);
+		RTE_MBUF_METADATA_UINT16_PTR(pkt[0],FUN_MBUF_HDR_ROOM(pkt[0]) + 12);
 	uint16_t *eth_proto1 =
-		RTE_MBUF_METADATA_UINT16_PTR(pkt[1], eth_proto_offset);
+		RTE_MBUF_METADATA_UINT16_PTR(pkt[1],FUN_MBUF_HDR_ROOM(pkt[1]) + 12);
 	uint16_t *eth_proto2 =
-		RTE_MBUF_METADATA_UINT16_PTR(pkt[2], eth_proto_offset);
+		RTE_MBUF_METADATA_UINT16_PTR(pkt[2],FUN_MBUF_HDR_ROOM(pkt[2]) + 12);
 	uint16_t *eth_proto3 =
-		RTE_MBUF_METADATA_UINT16_PTR(pkt[3], eth_proto_offset);
+		RTE_MBUF_METADATA_UINT16_PTR(pkt[3],FUN_MBUF_HDR_ROOM(pkt[3]) + 12);
 
 	uint8_t *protocol0;
 	uint8_t *protocol1;
@@ -609,8 +610,8 @@ pkt4_key_arpicmp(struct rte_mbuf **pkt, uint32_t pkt_num, void *arg)
 	uint8_t *protocol3;
 
 	#ifdef IPV6
-	uint32_t prot_offset_ipv6 =
-			MBUF_HDR_ROOM + ETH_HDR_SIZE + IPV6_HDR_PROTOCOL_OFST;
+	//uint32_t prot_offset_ipv6 =
+	//		MBUF_HDR_ROOM + ETH_HDR_SIZE + IPV6_HDR_PROTOCOL_OFST;
 
 	#endif
 
@@ -618,35 +619,35 @@ pkt4_key_arpicmp(struct rte_mbuf **pkt, uint32_t pkt_num, void *arg)
 /* --0-- */
 	if (rte_be_to_cpu_16(*eth_proto0) == ETHER_TYPE_IPv6)
 		protocol0 =
-				RTE_MBUF_METADATA_UINT8_PTR(pkt[0], prot_offset_ipv6);
+				RTE_MBUF_METADATA_UINT8_PTR(pkt[0],FUN_MBUF_HDR_ROOM(pkt[0]) + ETH_HDR_SIZE + IPV6_HDR_PROTOCOL_OFST);
 	else
-		protocol0 = RTE_MBUF_METADATA_UINT8_PTR(pkt[0], prot_offset);
+		protocol0 = RTE_MBUF_METADATA_UINT8_PTR(pkt[0], FUN_MBUF_HDR_ROOM(pkt[0]) + ETH_HDR_SIZE + IP_HDR_PROTOCOL_OFST);
 
 /* --1-- */
 	if (rte_be_to_cpu_16(*eth_proto1) == ETHER_TYPE_IPv6)
 		protocol1 =
-				RTE_MBUF_METADATA_UINT8_PTR(pkt[1], prot_offset_ipv6);
+				RTE_MBUF_METADATA_UINT8_PTR(pkt[1],FUN_MBUF_HDR_ROOM(pkt[1]) + ETH_HDR_SIZE + IPV6_HDR_PROTOCOL_OFST);
 	else
-		protocol1 = RTE_MBUF_METADATA_UINT8_PTR(pkt[1], prot_offset);
+		protocol1 = RTE_MBUF_METADATA_UINT8_PTR(pkt[1],FUN_MBUF_HDR_ROOM(pkt[1]) + ETH_HDR_SIZE + IP_HDR_PROTOCOL_OFST);
 
 /* --2-- */
 	if (rte_be_to_cpu_16(*eth_proto2) == ETHER_TYPE_IPv6)
 		protocol2 =
-				RTE_MBUF_METADATA_UINT8_PTR(pkt[2], prot_offset_ipv6);
+				RTE_MBUF_METADATA_UINT8_PTR(pkt[2], FUN_MBUF_HDR_ROOM(pkt[2]) + ETH_HDR_SIZE + IPV6_HDR_PROTOCOL_OFST);
 	else
-		protocol2 = RTE_MBUF_METADATA_UINT8_PTR(pkt[2], prot_offset);
+		protocol2 = RTE_MBUF_METADATA_UINT8_PTR(pkt[2], FUN_MBUF_HDR_ROOM(pkt[2]) + ETH_HDR_SIZE + IP_HDR_PROTOCOL_OFST);
 
 /* --3-- */
 	if (rte_be_to_cpu_16(*eth_proto3) == ETHER_TYPE_IPv6)
 		protocol3 =
-				RTE_MBUF_METADATA_UINT8_PTR(pkt[3], prot_offset_ipv6);
+				RTE_MBUF_METADATA_UINT8_PTR(pkt[3], FUN_MBUF_HDR_ROOM(pkt[3]) + ETH_HDR_SIZE + IPV6_HDR_PROTOCOL_OFST);
 	else
-		protocol3 = RTE_MBUF_METADATA_UINT8_PTR(pkt[3], prot_offset);
+		protocol3 = RTE_MBUF_METADATA_UINT8_PTR(pkt[3], FUN_MBUF_HDR_ROOM(pkt[3]) + ETH_HDR_SIZE + IP_HDR_PROTOCOL_OFST);
 	#else
-	protocol0 = RTE_MBUF_METADATA_UINT8_PTR(pkt[0], prot_offset);
-	protocol1 = RTE_MBUF_METADATA_UINT8_PTR(pkt[1], prot_offset);
-	protocol2 = RTE_MBUF_METADATA_UINT8_PTR(pkt[2], prot_offset);
-	protocol3 = RTE_MBUF_METADATA_UINT8_PTR(pkt[3], prot_offset);
+	protocol0 = RTE_MBUF_METADATA_UINT8_PTR(pkt[0], FUN_MBUF_HDR_ROOM(pkt[0]) + ETH_HDR_SIZE + IP_HDR_PROTOCOL_OFST );
+	protocol1 = RTE_MBUF_METADATA_UINT8_PTR(pkt[1], FUN_MBUF_HDR_ROOM(pkt[1]) + ETH_HDR_SIZE + IP_HDR_PROTOCOL_OFST );
+	protocol2 = RTE_MBUF_METADATA_UINT8_PTR(pkt[2], FUN_MBUF_HDR_ROOM(pkt[2]) + ETH_HDR_SIZE + IP_HDR_PROTOCOL_OFST );
+	protocol3 = RTE_MBUF_METADATA_UINT8_PTR(pkt[3], FUN_MBUF_HDR_ROOM(pkt[3]) + ETH_HDR_SIZE + IP_HDR_PROTOCOL_OFST);
 	#endif
 
 	if ((ARPICMP_DEBUG > 2) && (arpicmp_pkt_print_count < 10)) {
diff --git a/common/VIL/pipeline_loadb/pipeline_loadb_be.c b/common/VIL/pipeline_loadb/pipeline_loadb_be.c
index c791012..995ab87 100644
--- a/common/VIL/pipeline_loadb/pipeline_loadb_be.c
+++ b/common/VIL/pipeline_loadb/pipeline_loadb_be.c
@@ -145,7 +145,7 @@ uint8_t calculate_lb_thread_prv(struct rte_mbuf *pkt, void *arg)
 	uint16_t *dst_port;
 	uint8_t *protocol;
 	struct lb_pkt *lb_pkt = (struct lb_pkt *)
-			RTE_MBUF_METADATA_UINT8_PTR(pkt, MBUF_HDR_ROOM);
+			RTE_MBUF_METADATA_UINT8_PTR(pkt, FUN_MBUF_HDR_ROOM(pkt));
 
 	if (rte_be_to_cpu_16(lb_pkt->eth.ether_type) == ETHER_TYPE_IPv6) {
 		src_addr = (uint32_t *)&lb_pkt->ipv6_port.ipv6.src_addr;
@@ -334,7 +334,7 @@ uint8_t calculate_lb_thread_pub(struct rte_mbuf *pkt, void *arg)
 	uint8_t *protocol;
 	struct lb_pkt *lb_pkt = (struct lb_pkt *)
 				RTE_MBUF_METADATA_UINT8_PTR(pkt,
-					MBUF_HDR_ROOM);
+					FUN_MBUF_HDR_ROOM(pkt));
 
 	if (rte_be_to_cpu_16(lb_pkt->eth.ether_type) == ETHER_TYPE_IPv6) {
 		src_addr = (uint32_t *)&lb_pkt->ipv6_port.ipv6.src_addr;
@@ -494,7 +494,7 @@ pkt_work_loadb_key_prv(
 
 	struct lb_pkt *lb_pkt = (struct lb_pkt *)
 				RTE_MBUF_METADATA_UINT8_PTR(pkt,
-				MBUF_HDR_ROOM);
+				FUN_MBUF_HDR_ROOM(pkt));
 	uint32_t *out_port = RTE_MBUF_METADATA_UINT32_PTR(pkt,
 				outport_offset);
 
@@ -536,7 +536,7 @@ pkt_work_loadb_key_pub(
 
 	struct lb_pkt *lb_pkt = (struct lb_pkt *)
 				RTE_MBUF_METADATA_UINT8_PTR(pkt,
-				MBUF_HDR_ROOM);
+				FUN_MBUF_HDR_ROOM(pkt));
 	uint32_t *out_port = RTE_MBUF_METADATA_UINT32_PTR(pkt,
 				outport_offset);
 
@@ -586,16 +586,16 @@ pkt4_work_loadb_key_prv(
 
 	struct lb_pkt *lb_pkt0 = (struct lb_pkt *)
 				RTE_MBUF_METADATA_UINT8_PTR(pkt[0],
-					MBUF_HDR_ROOM);
+					FUN_MBUF_HDR_ROOM(pkt[0]));
 	struct lb_pkt *lb_pkt1 = (struct lb_pkt *)
 				RTE_MBUF_METADATA_UINT8_PTR(pkt[1],
-					MBUF_HDR_ROOM);
+					FUN_MBUF_HDR_ROOM(pkt[1]));
 	struct lb_pkt *lb_pkt2 = (struct lb_pkt *)
 				RTE_MBUF_METADATA_UINT8_PTR(pkt[2],
-					MBUF_HDR_ROOM);
+					FUN_MBUF_HDR_ROOM(pkt[2]));
 	struct lb_pkt *lb_pkt3 = (struct lb_pkt *)
 				RTE_MBUF_METADATA_UINT8_PTR(pkt[3],
-					MBUF_HDR_ROOM);
+					FUN_MBUF_HDR_ROOM(pkt[3]));
 
 	#ifdef MY_LOADB_DBG_PRINT
 	if (LOADB_DEBUG == 3)
@@ -666,16 +666,16 @@ pkt4_work_loadb_key_pub(
 
 	struct lb_pkt *lb_pkt0 = (struct lb_pkt *)
 				RTE_MBUF_METADATA_UINT8_PTR(pkt[0],
-					MBUF_HDR_ROOM);
+					FUN_MBUF_HDR_ROOM(pkt[0]));
 	struct lb_pkt *lb_pkt1 = (struct lb_pkt *)
 				RTE_MBUF_METADATA_UINT8_PTR(pkt[1],
-					MBUF_HDR_ROOM);
+					FUN_MBUF_HDR_ROOM(pkt[1]));
 	struct lb_pkt *lb_pkt2 = (struct lb_pkt *)
 				RTE_MBUF_METADATA_UINT8_PTR(pkt[2],
-					MBUF_HDR_ROOM);
+					FUN_MBUF_HDR_ROOM(pkt[2]));
 	struct lb_pkt *lb_pkt3 = (struct lb_pkt *)
 				RTE_MBUF_METADATA_UINT8_PTR(pkt[3],
-					MBUF_HDR_ROOM);
+					FUN_MBUF_HDR_ROOM(pkt[3]));
 
 	#ifdef MY_LOADB_DBG_PRINT
 	if (LOADB_DEBUG == 3)
diff --git a/common/VIL/pipeline_loadb/pipeline_loadb_be.h b/common/VIL/pipeline_loadb/pipeline_loadb_be.h
index a948f4c..5639859 100644
--- a/common/VIL/pipeline_loadb/pipeline_loadb_be.h
+++ b/common/VIL/pipeline_loadb/pipeline_loadb_be.h
@@ -20,8 +20,9 @@
 #include <rte_ip.h>
 #include "pipeline_common_be.h"
 #include <app.h>
+#include "mbuf_hdr_room.h"
 
-#define MBUF_HDR_ROOM 256
+#define FUN_MBUF_HDR_ROOM(pkt) DPDK_17_05_MBUF_HDR_ROOM(pkt)
 #define ETH_HDR_SIZE  14
 #define IP_HDR_SRC_ADR_OFST 12
 #define IP_HDR_DST_ADR_OFST 16
diff --git a/common/VIL/pipeline_txrx/pipeline_txrx_be.c b/common/VIL/pipeline_txrx/pipeline_txrx_be.c
index 2fcb4ad..e339bca 100644
--- a/common/VIL/pipeline_txrx/pipeline_txrx_be.c
+++ b/common/VIL/pipeline_txrx/pipeline_txrx_be.c
@@ -183,7 +183,7 @@ pkt_work_txrx(struct rte_mbuf *pkt, uint32_t pkt_num, void *arg)
 		return;
 
 	uint8_t in_port_id = pkt->port;
-	uint32_t eth_proto_offset = MBUF_HDR_ROOM + 12;
+	uint32_t eth_proto_offset = FUN_MBUF_HDR_ROOM(pkt) + 12;
 
 	uint32_t pkt_mask = 1 << pkt_num;
 	/* ARP outport number */
@@ -194,7 +194,7 @@ pkt_work_txrx(struct rte_mbuf *pkt, uint32_t pkt_num, void *arg)
 
 	uint8_t *protocol;
 	uint32_t prot_offset =
-			MBUF_HDR_ROOM + ETH_HDR_SIZE + IP_HDR_PROTOCOL_OFST;
+			FUN_MBUF_HDR_ROOM(pkt) + ETH_HDR_SIZE + IP_HDR_PROTOCOL_OFST;
 
 	#ifdef IPV6
 	struct ipv6_hdr *ipv6_h;
@@ -226,7 +226,7 @@ pkt_work_txrx(struct rte_mbuf *pkt, uint32_t pkt_num, void *arg)
 
 	/* header room + eth hdr size + src_aadr offset in ip header */
 	uint32_t dst_addr_offset =
-			MBUF_HDR_ROOM + ETH_HDR_SIZE + IP_HDR_DST_ADR_OFST;
+			FUN_MBUF_HDR_ROOM(pkt) + ETH_HDR_SIZE + IP_HDR_DST_ADR_OFST;
 	uint32_t *dst_addr = RTE_MBUF_METADATA_UINT32_PTR(pkt, dst_addr_offset);
 
 	if (TXRX_DEBUG > 2)
@@ -293,7 +293,7 @@ pkt4_work_txrx(struct rte_mbuf **pkt, uint32_t pkt_num, void *arg)
 		return;
 
 	uint16_t in_port_id = (*pkt)->port;
-	uint32_t eth_proto_offset = MBUF_HDR_ROOM + 12;
+	//uint32_t eth_proto_offset = MBUF_HDR_ROOM + 12;
 
 
 	uint32_t pkt_mask0 = 1 << pkt_num;
@@ -305,17 +305,17 @@ pkt4_work_txrx(struct rte_mbuf **pkt, uint32_t pkt_num, void *arg)
 	uint32_t out_port = p_txrx->p.n_ports_out - 1;
 
 	uint16_t *eth_proto0 =
-			RTE_MBUF_METADATA_UINT16_PTR(pkt[0], eth_proto_offset);
+			RTE_MBUF_METADATA_UINT16_PTR(pkt[0], FUN_MBUF_HDR_ROOM(pkt[0]) + 12);
 	uint16_t *eth_proto1 =
-			RTE_MBUF_METADATA_UINT16_PTR(pkt[1], eth_proto_offset);
+			RTE_MBUF_METADATA_UINT16_PTR(pkt[1], FUN_MBUF_HDR_ROOM(pkt[1]) + 12);
 	uint16_t *eth_proto2 =
-			RTE_MBUF_METADATA_UINT16_PTR(pkt[2], eth_proto_offset);
+			RTE_MBUF_METADATA_UINT16_PTR(pkt[2], FUN_MBUF_HDR_ROOM(pkt[2]) + 12);
 	uint16_t *eth_proto3 =
-			RTE_MBUF_METADATA_UINT16_PTR(pkt[3], eth_proto_offset);
+			RTE_MBUF_METADATA_UINT16_PTR(pkt[3], FUN_MBUF_HDR_ROOM(pkt[3]) + 12);
 
 	uint8_t *protocol0, *protocol1, *protocol2, *protocol3;
 	uint32_t prot_offset =
-			MBUF_HDR_ROOM + ETH_HDR_SIZE + IP_HDR_PROTOCOL_OFST;
+			FUN_MBUF_HDR_ROOM(pkt[0]) + ETH_HDR_SIZE + IP_HDR_PROTOCOL_OFST;
 
 	#ifdef IPV6
 	struct ipv6_hdr *ipv6_h0, *ipv6_h1, *ipv6_h2, *ipv6_h3;
@@ -375,7 +375,7 @@ pkt4_work_txrx(struct rte_mbuf **pkt, uint32_t pkt_num, void *arg)
 
 	/* header room + eth hdr size + src_aadr offset in ip header */
 	uint32_t dst_addr_offset0 =
-			MBUF_HDR_ROOM + ETH_HDR_SIZE + IP_HDR_DST_ADR_OFST;
+			FUN_MBUF_HDR_ROOM(pkt[0]) + ETH_HDR_SIZE + IP_HDR_DST_ADR_OFST;
 	uint32_t *dst_addr0 =
 			RTE_MBUF_METADATA_UINT32_PTR(pkt[0], dst_addr_offset0);
 
@@ -437,7 +437,7 @@ pkt4_work_txrx(struct rte_mbuf **pkt, uint32_t pkt_num, void *arg)
 
 	/* header room + eth hdr size + src_aadr offset in ip header */
 	uint32_t dst_addr_offset1 =
-			MBUF_HDR_ROOM + ETH_HDR_SIZE + IP_HDR_DST_ADR_OFST;
+			FUN_MBUF_HDR_ROOM(pkt[1]) + ETH_HDR_SIZE + IP_HDR_DST_ADR_OFST;
 	uint32_t *dst_addr1 =
 			RTE_MBUF_METADATA_UINT32_PTR(pkt[1], dst_addr_offset1);
 
@@ -498,7 +498,7 @@ pkt4_work_txrx(struct rte_mbuf **pkt, uint32_t pkt_num, void *arg)
 
 	/* header room + eth hdr size + src_aadr offset in ip header */
 	uint32_t dst_addr_offset2 =
-			MBUF_HDR_ROOM + ETH_HDR_SIZE + IP_HDR_DST_ADR_OFST;
+			FUN_MBUF_HDR_ROOM(pkt[2]) + ETH_HDR_SIZE + IP_HDR_DST_ADR_OFST;
 	uint32_t *dst_addr2 =
 			RTE_MBUF_METADATA_UINT32_PTR(pkt[2], dst_addr_offset2);
 
@@ -559,7 +559,7 @@ pkt4_work_txrx(struct rte_mbuf **pkt, uint32_t pkt_num, void *arg)
 
 	/* header room + eth hdr size + src_aadr offset in ip header */
 	uint32_t dst_addr_offset3 =
-			MBUF_HDR_ROOM + ETH_HDR_SIZE + IP_HDR_DST_ADR_OFST;
+			FUN_MBUF_HDR_ROOM(pkt[3]) + ETH_HDR_SIZE + IP_HDR_DST_ADR_OFST;
 	uint32_t *dst_addr3 =
 			RTE_MBUF_METADATA_UINT32_PTR(pkt, dst_addr_offset3);
 
diff --git a/common/vnf_common/mbuf_hdr_room.h b/common/vnf_common/mbuf_hdr_room.h
new file mode 100644
index 0000000..5102845
--- /dev/null
+++ b/common/vnf_common/mbuf_hdr_room.h
@@ -0,0 +1,6 @@
+#ifndef MBUF_HDR_ROOM_H 
+#define MBUF_HDR_ROOM_H
+#include <stdint.h>
+#define DPDK_17_05_MBUF_HDR_ROOM(pkt) (pkt->data_off + ((int)( (uint8_t*)pkt->buf_addr - (uint8_t*)pkt)))
+
+#endif
diff --git a/common/vnf_common/vnf_common.h b/common/vnf_common/vnf_common.h
index 2ba5148..8b831ca 100644
--- a/common/vnf_common/vnf_common.h
+++ b/common/vnf_common/vnf_common.h
@@ -19,8 +19,9 @@
 
 #include <rte_pipeline.h>
 #include <rte_ether.h>
+#include "mbuf_hdr_room.h"
 
-#define MBUF_HDR_ROOM 256
+#define FUN_MBUF_HDR_ROOM(pkt) DPDK_17_05_MBUF_HDR_ROOM(pkt)
 #define ETH_HDR_SIZE  14
 #define IP_HDR_SRC_ADR_OFST 12
 #define IP_HDR_DST_ADR_OFST 16
diff --git a/patches/dpdk_custom_patch/cavium-liquidio-setmtu-fail.patch b/patches/dpdk_custom_patch/cavium-liquidio-setmtu-fail.patch
new file mode 100644
index 0000000..ac5d5aa
--- /dev/null
+++ b/patches/dpdk_custom_patch/cavium-liquidio-setmtu-fail.patch
@@ -0,0 +1,13 @@
+--- a/lib/librte_ether/rte_ethdev.c	2018-01-25 09:42:42.595641199 +0800
++++ b/lib/librte_ether/rte_ethdev.c	2018-01-25 09:45:11.842979098 +0800
+@@ -789,7 +789,8 @@
+ 			dev_conf->rxmode.max_rx_pkt_len > ETHER_MAX_LEN)
+ 			/* Use default value */
+ 			dev->data->dev_conf.rxmode.max_rx_pkt_len =
+-							ETHER_MAX_LEN;
++							//ETHER_MAX_LEN;
++							1450;
+ 	}
+ 
+ 	/*
+
diff --git a/patches/dpdk_custom_patch/nfp-driver-set-inport.patch b/patches/dpdk_custom_patch/nfp-driver-set-inport.patch
index 476120b..061c900 100644
--- a/patches/dpdk_custom_patch/nfp-driver-set-inport.patch
+++ b/patches/dpdk_custom_patch/nfp-driver-set-inport.patch
@@ -8,26 +8,3 @@
  		rx_pkts[avail++] = mb;
  
  		/* Now resetting and updating the descriptor */
---- a/lib/librte_ether/rte_ethdev.h	2017-02-15 05:17:45.000000000 +0800
-+++ b/lib/librte_ether/rte_ethdev.h	2018-01-16 17:12:27.193139010 +0800
-@@ -171,6 +171,7 @@
- #endif
- 
- #include <stdint.h>
-+#include <assert.h>
- 
- #include <rte_dev.h>
- 
-@@ -2706,7 +2707,12 @@
- #endif
- 	int16_t nb_rx = (*dev->rx_pkt_burst)(dev->data->rx_queues[queue_id],
- 			rx_pkts, nb_pkts);
--
-+        int16_t idx;
-+        for(idx = 0 ; idx < nb_rx ; ++idx)
-+        {
-+              assert(rx_pkts[idx]->port != 255);
-+        }
-+	
- #ifdef RTE_ETHDEV_RXTX_CALLBACKS
- 	struct rte_eth_rxtx_callback *cb = dev->post_rx_burst_cbs[queue_id];
diff --git a/tools/vnf_build.sh b/tools/vnf_build.sh
index aa4de7f..0d609da 100755
--- a/tools/vnf_build.sh
+++ b/tools/vnf_build.sh
@@ -239,6 +239,7 @@ install_dpdk()
 	fi
 	echo "Apply dpdk custom patches for cgnat..."
 	patch -p1 < $VNF_CORE/patches/dpdk_custom_patch/nfp-driver-set-inport.patch
+        patch -p1 < $VNF_CORE/patches/dpdk_custom_patch/cavium-liquidio-setmtu-fail.patch
 
 	make EXTRA_CFLAGS="-O0 -g" -j1 install T=$RTE_TARGET
 	if [ $? -ne 0 ] ; then
-- 
2.7.4

