diff --git a/Makefile b/Makefile
index 7c14693..d6712f4 100644
--- a/Makefile
+++ b/Makefile
@@ -21,10 +21,10 @@ RTE_TARGET ?= x86_64-native-linuxapp-gcc
 
 TARGETS      := all clean
 VNF_DIR      := VNFs
-ACL          := $(VNF_DIR)/vACL
-FW           := $(VNF_DIR)/vFW
+#ACL          := $(VNF_DIR)/vACL
+#FW           := $(VNF_DIR)/vFW
 CGNAPT       := $(VNF_DIR)/vCGNAPT
-UDP_Replay   := $(VNF_DIR)/UDP_Replay
+#UDP_Replay   := $(VNF_DIR)/UDP_Replay
 
 subdirs      := $(ACL) $(CGNAPT) $(FW) $(UDP_Replay)
 
diff --git a/VNFs/vCGNAPT/Makefile b/VNFs/vCGNAPT/Makefile
index e349f62..51b5b88 100644
--- a/VNFs/vCGNAPT/Makefile
+++ b/VNFs/vCGNAPT/Makefile
@@ -61,6 +61,7 @@ CFLAGS += -I$(VNF_CORE)/common/VIL/pipeline_common -I$(VNF_CORE)/common/VIL/pipe
 CFLAGS += -I$(VNF_CORE)/common/VIL/pipeline_master -I$(VNF_CORE)/common/VIL/pipeline_passthrough
 CFLAGS += -I$(VNF_CORE)/common/VIL/pipeline_txrx -I$(VNF_CORE)/common/VIL/alg
 CFLAGS += -I$(VNF_CORE)/common/VIL/pipeline_arpicmp
+CFLAGS += $(ACC_INCLUDE_PATH) 
 
 # all source are stored in SRCS-y
 SRCS-$(CONFIG_RTE_LIBRTE_PIPELINE) := main.c
@@ -107,10 +108,11 @@ SRCS-$(CONFIG_RTE_LIBRTE_PIPELINE) += cgnapt_pcp_fe.c
 SRCS-$(CONFIG_RTE_LIBRTE_PIPELINE) += lib_sip_alg.c
 SRCS-$(CONFIG_RTE_LIBRTE_PIPELINE) += lib_ftp_alg.c
 
-CFLAGS += -O3
-CFLAGS += -DIPV6
+#CFLAGS += -O3
+#CFLAGS += -DIPV6
 CFLAGS += -DCHECKSUM_REQ
 #CFLAGS += -DPCP_ENABLE
+_LDLIBS-y += $(ACC_LIB_PATH) 
 #CFLAGS += -DSIP_ALG
 #CFLAGS += -DALG
 #CFLAGS += -DCT_CGNAT
diff --git a/VNFs/vCGNAPT/pipeline/pipeline_cgnapt.c b/VNFs/vCGNAPT/pipeline/pipeline_cgnapt.c
index 239d34f..802e74e 100644
--- a/VNFs/vCGNAPT/pipeline/pipeline_cgnapt.c
+++ b/VNFs/vCGNAPT/pipeline/pipeline_cgnapt.c
@@ -601,6 +601,51 @@ static cmdline_parse_inst_t cmd_entry_add = {
 			 },
 };
 
+static cmdline_parse_token_string_t cmd_cgnat_acc_enable_string =
+TOKEN_STRING_INITIALIZER(struct cmd_entry_add_result, entry_string,
+			 "flow-accelerate-enable");
+
+int cgnat_flow_acc_enable = 0;
+
+static void
+cmd_cgnat_acc_enable_parsed(void *parsed_result,
+					struct cmdline *cl, void *data)
+{
+	cgnat_flow_acc_enable = 1;
+}
+
+static cmdline_parse_inst_t  cmd_cgnat_acc_enable= {
+	.f = cmd_cgnat_acc_enable_parsed,
+	.data = NULL,
+	.help_str = "vCGNAT flow accelerate enable",
+	.tokens = {
+			(void *)&cmd_entry_add_p_string,
+			(void *)&cmd_cgnat_acc_enable_string,
+			NULL,
+	},
+};
+
+static void
+cmd_cgnat_acc_disable_parsed(void *parsed_result,
+				struct cmdline *cl, void *data)
+{
+
+}
+
+static cmdline_parse_token_string_t cmd_cgnat_acc_disable_string =
+TOKEN_STRING_INITIALIZER(struct cmd_entry_add_result, entry_string,
+			 "flow-accelerate-disable");
+
+static cmdline_parse_inst_t  cmd_cgnat_acc_disable= {
+	.f = cmd_cgnat_acc_disable_parsed,
+	.data = NULL,
+	.help_str = "vCGNAT flow accelerate enable",
+	.tokens = {
+			(void *)&cmd_entry_add_p_string,
+			(void *)&cmd_cgnat_acc_disable_string,
+			NULL,
+	},
+};
 /**
  * A structure defining the multiple entry add parse arguments.
  */
@@ -1502,6 +1547,8 @@ static cmdline_parse_ctx_t pipeline_cmds[] = {
 	#endif
 	(cmdline_parse_inst_t *) &cmd_stats,
 	(cmdline_parse_inst_t *) &cmd_clear_stats,
+	(cmdline_parse_inst_t *) &cmd_cgnat_acc_enable,
+	(cmdline_parse_inst_t *) &cmd_cgnat_acc_disable,
 	NULL,
 };
 
diff --git a/VNFs/vCGNAPT/pipeline/pipeline_cgnapt_be.c b/VNFs/vCGNAPT/pipeline/pipeline_cgnapt_be.c
index 2da8b5e..36b4caf 100644
--- a/VNFs/vCGNAPT/pipeline/pipeline_cgnapt_be.c
+++ b/VNFs/vCGNAPT/pipeline/pipeline_cgnapt_be.c
@@ -77,6 +77,8 @@
 #include "cgnapt_pcp_be.h"
 #endif
 
+#include "cgnapt_accelerate.h"
+
 /* To maintain all cgnapt pipeline pointers used for all stats */
 struct pipeline_cgnapt *all_pipeline_cgnapt[128];
 uint8_t n_cgnapt_pipeline;
@@ -3692,6 +3694,7 @@ pkt_work_cgnapt_key_ipv4_pub(
 	p_nat->key_ptrs[pkt_num] = &p_nat->keys[pkt_num];
 }
 
+extern int cgnat_flow_acc_enable;
 
 /**
  * NAPT function for IPv4 private traffic which handles 1 pkt
@@ -3879,6 +3882,11 @@ pkt_work_cgnapt_ipv4_prv(
 				*outport_id);
 	#endif
 
+	uint8_t srcmac[6];
+        uint8_t dstmac[6];
+        memcpy(dstmac,eth_dest,sizeof(dstmac));
+        memcpy(srcmac,eth_src,sizeof(srcmac));
+
 	if (local_dest_mac_present(dest_if)) {
 		memcpy(eth_dest,
 				get_local_link_hw_addr(dest_if),
@@ -3942,6 +3950,28 @@ pkt_work_cgnapt_ipv4_prv(
 		memcpy(eth_src, get_link_hw_addr(dest_if),
 				sizeof(struct ether_addr));
 	}
+	
+	if(cgnat_flow_acc_enable)
+	{
+		//XXX cgnat flow acc
+		struct acc_flow cgnat_flow;
+		uint16_t current_src_port = rte_bswap16(*src_port);
+		uint32_t xlate_addr = rte_bswap32(entry->data.pub_ip);
+		memset(&cgnat_flow,0,sizeof(cgnat_flow));
+
+		acc_match_field_set(&(cgnat_flow.match),&(cgnat_flow.mask),srcmac,(srcmac));
+		acc_match_field_set(&(cgnat_flow.match),&(cgnat_flow.mask),dstmac,(dstmac));
+		acc_match_field_set(&(cgnat_flow.match),&(cgnat_flow.mask),src_ip,(*src_addr));
+		acc_match_field_set(&(cgnat_flow.match),&(cgnat_flow.mask),src_port,current_src_port);
+		acc_match_field_set(&(cgnat_flow.match),&(cgnat_flow.mask),protocol,(protocol));
+
+		acc_action_field_set(&(cgnat_flow.action),srcmac,(eth_src));
+		acc_action_field_set(&(cgnat_flow.action),dstmac,(eth_dest));
+		acc_action_field_set(&(cgnat_flow.action),src_ip,xlate_addr);
+		acc_action_field_set(&(cgnat_flow.action),src_port,(entry->data.pub_port));
+
+                cgnat_accelerate(&p_nat->p,&cgnat_flow);
+	}
 
 	{
 		/* Egress */
@@ -4261,6 +4291,11 @@ pkt_work_cgnapt_ipv4_pub(
 			"\tout_port%d\n", pkt->port, dest_if, *outport_id);
 		#endif
 	}
+	//copy eth_src,eth_dest
+	uint8_t srcmac[6];
+	uint8_t dstmac[6];
+	memcpy(dstmac,eth_dest,sizeof(dstmac));
+	memcpy(srcmac,eth_src,sizeof(srcmac));
 
 	if (local_dest_mac_present(dest_if)) {
 		memcpy(eth_dest,
@@ -4332,6 +4367,28 @@ pkt_work_cgnapt_ipv4_pub(
 				 sizeof(struct ether_addr));
 	}
 
+	if(cgnat_flow_acc_enable)
+	{
+		//XXX cgnat flow acc
+		struct acc_flow cgnat_flow;
+		uint16_t current_dst_port = rte_bswap16(*dst_port);
+		uint32_t xlate_addr = rte_bswap32(entry->data.prv_ip);
+		memset(&cgnat_flow,0,sizeof(cgnat_flow));
+
+		acc_match_field_set(&(cgnat_flow.match),&(cgnat_flow.mask),srcmac,(srcmac));
+		acc_match_field_set(&(cgnat_flow.match),&(cgnat_flow.mask),dstmac,(dstmac));
+		acc_match_field_set(&(cgnat_flow.match),&(cgnat_flow.mask),dst_ip,(*dst_addr));
+		acc_match_field_set(&(cgnat_flow.match),&(cgnat_flow.mask),src_port,current_dst_port);
+		acc_match_field_set(&(cgnat_flow.match),&(cgnat_flow.mask),protocol,(protocol));
+
+		acc_action_field_set(&(cgnat_flow.action),srcmac,(eth_src));
+		acc_action_field_set(&(cgnat_flow.action),dstmac,(eth_dest));
+		acc_action_field_set(&(cgnat_flow.action),dst_ip,xlate_addr);
+		acc_action_field_set(&(cgnat_flow.action),dst_port,(entry->data.prv_port));
+
+                cgnat_accelerate(&p_nat->p,&cgnat_flow);
+	}
+
 	{
 		/* Ingress */
 
@@ -4733,6 +4790,11 @@ pkt4_work_cgnapt_ipv4_prv(
 				 pkt->port, dest_if, *outport_id);
 		#endif
 		}
+		
+                uint8_t srcmac[6];
+                uint8_t dstmac[6];
+                memcpy(dstmac,eth_dest,sizeof(dstmac));
+                memcpy(srcmac,eth_src,sizeof(srcmac));
 
 		if (local_dest_mac_present(dest_if)) {
 			memcpy(eth_dest,
@@ -4805,6 +4867,29 @@ pkt4_work_cgnapt_ipv4_prv(
 					 sizeof(struct ether_addr));
 		}
 
+		if(cgnat_flow_acc_enable)
+		{
+			//XXX cgnat flow acc
+			struct acc_flow cgnat_flow;
+			uint16_t current_src_port = rte_bswap16(*src_port);
+		        uint32_t xlate_addr = rte_bswap32(entry->data.pub_ip);
+			memset(&cgnat_flow,0,sizeof(cgnat_flow));
+
+			acc_match_field_set(&(cgnat_flow.match),&(cgnat_flow.mask),srcmac,(srcmac));
+			acc_match_field_set(&(cgnat_flow.match),&(cgnat_flow.mask),dstmac,(dstmac));
+			acc_match_field_set(&(cgnat_flow.match),&(cgnat_flow.mask),src_ip,(*src_addr));
+			acc_match_field_set(&(cgnat_flow.match),&(cgnat_flow.mask),src_port,current_src_port);
+			acc_match_field_set(&(cgnat_flow.match),&(cgnat_flow.mask),protocol,(protocol));
+
+			acc_action_field_set(&(cgnat_flow.action),srcmac,(eth_src));
+			acc_action_field_set(&(cgnat_flow.action),dstmac,(eth_dest));
+			acc_action_field_set(&(cgnat_flow.action),src_ip,xlate_addr);
+			acc_action_field_set(&(cgnat_flow.action),src_port,(entry->data.pub_port));
+
+			cgnat_accelerate(&p_nat->p,&cgnat_flow);
+
+		}
+
 		{
 			/* Egress */
 			*src_addr = rte_bswap32(entry->data.pub_ip);
@@ -5143,6 +5228,12 @@ pkt4_work_cgnapt_ipv4_pub(
 			#endif
 		}
 
+		//copy eth_src,eth_dest
+		uint8_t srcmac[6];
+		uint8_t dstmac[6];
+		memcpy(dstmac,eth_dest,sizeof(dstmac));
+		memcpy(srcmac,eth_src,sizeof(srcmac));
+
 		if (local_dest_mac_present(dest_if)) {
 			memcpy(eth_dest,
 					 get_local_link_hw_addr(dest_if),
@@ -5213,6 +5304,28 @@ pkt4_work_cgnapt_ipv4_pub(
 					 sizeof(struct ether_addr));
 		}
 
+		if(cgnat_flow_acc_enable)
+		{
+			//XXX cgnat flow acc
+			struct acc_flow cgnat_flow;
+			uint16_t current_dst_port = rte_bswap16(*dst_port);
+			uint32_t xlate_addr = rte_bswap32(entry->data.u.prv_ip);
+			memset(&cgnat_flow,0,sizeof(cgnat_flow));
+
+			acc_match_field_set(&(cgnat_flow.match),&(cgnat_flow.mask),srcmac,(srcmac));
+			acc_match_field_set(&(cgnat_flow.match),&(cgnat_flow.mask),dstmac,(dstmac));
+			acc_match_field_set(&(cgnat_flow.match),&(cgnat_flow.mask),dst_ip,(*dst_addr));
+			acc_match_field_set(&(cgnat_flow.match),&(cgnat_flow.mask),dst_port,current_dst_port);
+			acc_match_field_set(&(cgnat_flow.match),&(cgnat_flow.mask),protocol,(protocol));
+
+			acc_action_field_set(&(cgnat_flow.action),srcmac,(eth_src));
+			acc_action_field_set(&(cgnat_flow.action),dstmac,(eth_dest));
+			acc_action_field_set(&(cgnat_flow.action),src_ip,xlate_addr);
+			acc_action_field_set(&(cgnat_flow.action),src_port,(entry->data.prv_port));
+
+			cgnat_accelerate(&p_nat->p,&cgnat_flow);
+		}
+
 		{
 			/* Ingress */
 
diff --git a/common/VIL/conntrack/rte_ct_synproxy.c b/common/VIL/conntrack/rte_ct_synproxy.c
index 967596d..5f4666f 100644
--- a/common/VIL/conntrack/rte_ct_synproxy.c
+++ b/common/VIL/conntrack/rte_ct_synproxy.c
@@ -159,7 +159,7 @@ rte_sp_get_random_seq_number(void)
 }
 
 
-static int8_t rte_ct_ipversion(void *i_hdr)
+int8_t rte_ct_ipversion(void *i_hdr)
 {
 	uint8_t *ihdr = (uint8_t *)i_hdr;
 	int8_t hdr_chk = *ihdr;
diff --git a/common/VIL/l2l3_stack/lib_arp.c b/common/VIL/l2l3_stack/lib_arp.c
index 0162f82..e43afff 100644
--- a/common/VIL/l2l3_stack/lib_arp.c
+++ b/common/VIL/l2l3_stack/lib_arp.c
@@ -1485,6 +1485,7 @@ void request_arp(uint8_t port_id, uint32_t ip)
 	l2_phy_interface_t *link;
 	link = ifm_get_port(port_id);
 	struct rte_mbuf *arp_pkt = lib_arp_pkt;
+	arp_pkt->port = port_id;
 
 	if (arp_pkt == NULL) {
 		if (ARPICMP_DEBUG)
@@ -1671,6 +1672,12 @@ void process_arpicmp_pkt(struct rte_mbuf *pkt, l2_phy_interface_t *port)
 	uint32_t ip_addr;
 
 	uint32_t req_tip;
+	if(!port)
+	{
+		RTE_LOG(INFO,LIBARP,"****BUG****:%p,portid NULL,drop\n",pkt);
+		rte_pktmbuf_free(pkt);
+		return 0;
+	}
 
 	eth_h = rte_pktmbuf_mtod(pkt, struct ether_hdr *);
 
@@ -1694,9 +1701,10 @@ void process_arpicmp_pkt(struct rte_mbuf *pkt, l2_phy_interface_t *port)
 			RTE_LOG(INFO, LIBARP,
 				"Invalid protocol address length - not processing ARP req\n");
 		else {
-			if (port->ipv4_list == NULL) {
+			if (!port || port->ipv4_list == NULL) {
 				RTE_LOG(INFO, LIBARP,
 					"Ports IPV4 List is NULL.. Unable to Process\n");
+				//printf( "Ports IPV4 List is NULL.. Unable to Process\n");
 				return;
 			}
 
@@ -1710,7 +1718,16 @@ void process_arpicmp_pkt(struct rte_mbuf *pkt, l2_phy_interface_t *port)
 							DYNAMIC_ARP);
 
 				} else {
-					RTE_LOG(INFO, LIBARP,"ARP requested IP address mismatches interface IP - discarding\n");
+					RTE_LOG(INFO, LIBARP,"ARP requested (inport_id %d) IP address %d.%d.%d.%d mismatches interface IP %d.%d.%d.%d- discarding\n",
+					in_port_id,
+					((uint8_t*)&(arp_h->arp_data.arp_tip))[0],
+					((uint8_t*)&(arp_h->arp_data.arp_tip))[1],
+					((uint8_t*)&(arp_h->arp_data.arp_tip))[2],
+					((uint8_t*)&(arp_h->arp_data.arp_tip))[3],
+					((uint8_t*)&((ipv4list_t *) (port->ipv4_list))->ipaddr)[0],
+					((uint8_t*)&((ipv4list_t *) (port->ipv4_list))->ipaddr)[1],
+					((uint8_t*)&((ipv4list_t *) (port->ipv4_list))->ipaddr)[2],
+					((uint8_t*)&((ipv4list_t *) (port->ipv4_list))->ipaddr)[3]);
 				}
 			}
 			/// revise conditionals to allow processing of requests with target ip = this ip and
diff --git a/tools/vnf_build.sh b/tools/vnf_build.sh
index 4f6212c..9ae0469 100755
--- a/tools/vnf_build.sh
+++ b/tools/vnf_build.sh
@@ -24,7 +24,7 @@ echo "--------------------------------------------------------------------------
 HUGEPGSZ=`cat /proc/meminfo  | grep Hugepagesize | cut -d : -f 2 | tr -d ' '`
 MODPROBE="/sbin/modprobe"
 INSMOD="/sbin/insmod"
-DPDK_DOWNLOAD="http://dpdk.org/browse/dpdk/snapshot/dpdk-16.04.zip"
+DPDK_DOWNLOAD="http://dpdk.org/browse/dpdk/snapshot/dpdk-16.11.zip"
 DPDK_DIR=$VNF_CORE/dpdk
 
 #
@@ -81,7 +81,7 @@ setup_env()
 	echo
 	echo "Checking network connectivity..."
 	# b. Check for internet connections
-	wget -T 20 -t 3 --spider http://www.google.com > /dev/null 2>&1
+	wget -T 20 -t 3 --spider http://www.baidu.com > /dev/null 2>&1
 	if [ "$?" != 0 ]; then
 		while true; do
 			read -p "No Internet connection. Are you behind a proxy (y/n)? " yn
@@ -167,7 +167,7 @@ download_dpdk_zip()
 		wget ${DPDK_DOWNLOAD}
 	fi
 	unzip -o ${DPDK_DOWNLOAD##*/}
-	mv $VNF_CORE/dpdk-16.04 $VNF_CORE/dpdk
+	mv $VNF_CORE/dpdk-16.11 $VNF_CORE/dpdk
 }
 
 install_dpdk()
@@ -182,15 +182,22 @@ install_dpdk()
 	export RTE_TARGET=x86_64-native-linuxapp-gcc
 
 	pushd $DPDK_DIR
-	echo "Apply dpdk custom patches..."
-	patch -p1 < $VNF_CORE/patches/dpdk_custom_patch/i40e-fix-link-management.patch
-	patch -p1 < $VNF_CORE/patches/dpdk_custom_patch/i40e-fix-Rx-hang-when-disable-LLDP.patch
-	patch -p1 < $VNF_CORE/patches/dpdk_custom_patch/i40e-fix-link-status-change-interrupt.patch
-	patch -p1 < $VNF_CORE/patches/dpdk_custom_patch/i40e-fix-VF-bonded-device-link-down.patch
-	patch -p1 < $VNF_CORE/patches/dpdk_custom_patch/disable-acl-debug-logs.patch
-	patch -p1 < $VNF_CORE/patches/dpdk_custom_patch/set-log-level-to-info.patch
-
-	make -j install T=$RTE_TARGET
+	#echo "Apply dpdk custom patches..."
+	#patch -p1 < $VNF_CORE/patches/dpdk_custom_patch/i40e-fix-link-management.patch
+	#patch -p1 < $VNF_CORE/patches/dpdk_custom_patch/i40e-fix-Rx-hang-when-disable-LLDP.patch
+	#patch -p1 < $VNF_CORE/patches/dpdk_custom_patch/i40e-fix-link-status-change-interrupt.patch
+	#patch -p1 < $VNF_CORE/patches/dpdk_custom_patch/i40e-fix-VF-bonded-device-link-down.patch
+	#patch -p1 < $VNF_CORE/patches/dpdk_custom_patch/disable-acl-debug-logs.patch
+	#patch -p1 < $VNF_CORE/patches/dpdk_custom_patch/set-log-level-to-info.patch
+
+	echo "add netnorm"
+	sed 's/CONFIG_RTE_BUILD_SHARED_LIB=y/CONFIG_RTE_BUILD_SHARED_LIB=n/' -i config/common_base
+        sed 's/CONFIG_RTE_LIBRTE_NFP_PMD=n/CONFIG_RTE_LIBRTE_NFP_PMD=y/' -i config/common_base
+        sed 's@SRCS-y += ethtool/igb/igb_main.c@#SRCS-y += ethtool/igb/igb_main.c@g' -i lib/librte_eal/linuxapp/kni/Makefile
+	patch -p2 < $VNF_CORE/../samplevnf-cgnat-patch/build-dpdk-diff.patch
+
+	#make -j install T=$RTE_TARGET
+	make EXTRA_CFLAGS="-O0 -g" -j8 install T=$RTE_TARGET DESTDIR=install
 	if [ $? -ne 0 ] ; then
 		echo "Failed to build dpdk, please check the errors."
 		return
@@ -210,9 +217,11 @@ install_dpdk()
 setup_hugepages()
 {
 	#----
-	Pages=16
+	#Pages=16
+	Pages=2
 	if [[ "$HUGEPGSZ" = "2048kB" ]] ; then
-		Pages=8192
+		#Pages=8192
+		Pages=1024
 	fi
 	if [ ! "`grep nr_hugepages /etc/sysctl.conf`" ] ; then
 		echo "vm.nr_hugepages=$Pages" | sudo tee /etc/sysctl.conf
@@ -255,7 +264,8 @@ build_vnfs()
 	export RTE_TARGET=x86_64-native-linuxapp-gcc
 	pushd $VNF_CORE
 	make clean
-	make || { echo -e "\nVNF: Make failed\n"; }
+	#make || { echo -e "\nVNF: Make failed\n"; }
+	make V=1 EXTRA_CFLAGS="-O0 -g" || { echo -e "\nVNF: Make failed\n"; }
 	popd
 }
 
